// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.audio.Source;
import love.video.VideoStream;
import lua.Table;
import lua.UserData;

/**
 * A drawable video.
 */
extern class Video extends Drawable {

	/**
	 * Gets the width and height of the Video in pixels.
	 */
	public function getDimensions(): VideoGetDimensionsResult;

	/**
	 * Gets the scaling filters used when drawing the Video.
	 */
	public function getFilter(): VideoGetFilterResult;

	/**
	 * Gets the height of the Video in pixels.
	 * @return The height of the Video.
	 */
	public function getHeight(): Float;

	/**
	 * Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument.
	 * @return The audio Source used for audio playback, or nil if the video has no audio.
	 */
	public function getSource(): Source;

	/**
	 * Gets the VideoStream object used for decoding and controlling the video.
	 * @return The VideoStream used for decoding and controlling the video.
	 */
	public function getStream(): VideoStream;

	/**
	 * Gets the width of the Video in pixels.
	 * @return The width of the Video.
	 */
	public function getWidth(): Float;

	/**
	 * Gets whether the Video is currently playing.
	 * @return Whether the video is playing.
	 */
	public function isPlaying(): Bool;

	/**
	 * Pauses the Video.
	 */
	public function pause(): Void;

	/**
	 * Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw.
	 */
	public function play(): Void;

	/**
	 * Rewinds the Video to the beginning.
	 */
	public function rewind(): Void;

	/**
	 * Sets the current playback position of the Video.
	 * @param offset The time in seconds since the beginning of the Video.
	 */
	public function seek(offset: Float): Void;

	/**
	 * Sets the scaling filters used when drawing the Video.
	 * @param min The filter mode used when scaling the Video down.
	 * @param mag The filter mode used when scaling the Video up.
	 * @param anisotropy Maximum amount of anisotropic filtering used.
	 */
	public function setFilter(min: FilterMode, mag: FilterMode, ?anisotropy: Float): Void;

	/**
	 * Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization.
	 * @param source The audio Source used for audio playback, or nil to disable audio synchronization.
	 */
	public function setSource(?source: Source): Void;

	/**
	 * Gets the current playback position of the Video.
	 * @return The time in seconds since the beginning of the Video.
	 */
	public function tell(): Float;
}

@:multiReturn
extern class VideoGetFilterResult {
	var min: FilterMode;
	var mag: FilterMode;
	var anisotropy: Float;
}

@:multiReturn
extern class VideoGetDimensionsResult {
	var width: Float;
	var height: Float;
}