// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.Data;
import love.math.MatrixLayout;
import lua.Table;
import lua.UserData;

/**
 * A Shader is used for advanced hardware-accelerated pixel or vertex manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.
 * Potential uses for shaders include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, bump mapping, and much more! Here is a collection of basic shaders and good starting point to learn: https://github.com/vrld/moonshine
 */
extern class Shader extends Object {

	/**
	 * Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like.
	 * @return Warning and error messages (if any).
	 */
	public function getWarnings(): String;

	/**
	 * Gets whether a uniform / extern variable exists in the Shader.
	 * If a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case.
	 * @param name The name of the uniform variable.
	 * @return Whether the uniform exists in the shader and affects its final output.
	 */
	public function hasUniform(name: String): Bool;

	/**
	 * Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
	 * uniform float time;  // 'float' is the typical number type used in GLSL shaders.
	 * uniform float varsvec2 light_pos;
	 * uniform vec4 colors[4;
	 * The corresponding send calls would be
	 * shader:send('time', t)
	 * shader:send('vars',a,b)
	 * shader:send('light_pos', {light_x, light_y})
	 * shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
	 * Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
	 * @param name Name of the number to send to the shader.
	 * @param number Number to send to store in the uniform variable.
	 * @param ... Additional numbers to send if the uniform variable is an array.
	 */
	@:overload(function (name: String, vector: Table<Dynamic, Dynamic>, args: Rest<Table<Dynamic, Dynamic>>): Void {})
	@:overload(function (name: String, matrix: Table<Dynamic, Dynamic>, args: Rest<Table<Dynamic, Dynamic>>): Void {})
	@:overload(function (name: String, texture: Texture): Void {})
	@:overload(function (name: String, boolean: Bool, args: Rest<Bool>): Void {})
	@:overload(function (name: String, matrixlayout: MatrixLayout, matrix: Table<Dynamic, Dynamic>, args: Rest<Table<Dynamic, Dynamic>>): Void {})
	@:overload(function (name: String, data: Data, ?offset: Float, ?size: Float): Void {})
	@:overload(function (name: String, data: Data, matrixlayout: MatrixLayout, ?offset: Float, ?size: Float): Void {})
	@:overload(function (name: String, matrixlayout: MatrixLayout, data: Data, ?offset: Float, ?size: Float): Void {})
	public function send(name: String, number: Float, args: Rest<Float>): Void;

	/**
	 * Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled.
	 * Extern variables must be marked using the ''extern'' keyword, e.g.
	 * extern vec4 Color;
	 * The corresponding sendColor call would be
	 * shader:sendColor('Color', {r, g, b, a})
	 * Extern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param name The name of the color extern variable to send to in the shader.
	 * @param color A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector.
	 * @param ... Additional colors to send in case the extern is an array. All colors need to be of the same size (e.g. only vec3's).
	 */
	public function sendColor(name: String, color: Table<Dynamic, Dynamic>, args: Rest<Table<Dynamic, Dynamic>>): Void;
}