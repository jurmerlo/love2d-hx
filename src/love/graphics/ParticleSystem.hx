// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * A ParticleSystem can be used to create particle effects like fire or smoke.
 * The particle system has to be created using update it in the update callback to see any changes in the particles emitted.
 * The particle system won't create any particles unless you call setParticleLifetime and setEmissionRate.
 */
extern class ParticleSystem extends Drawable {

	/**
	 * Creates an identical copy of the ParticleSystem in the stopped state.
	 * @return The new identical copy of this ParticleSystem.
	 */
	public function clone(): ParticleSystem;

	/**
	 * Emits a burst of particles from the particle emitter.
	 * @param numparticles The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached.
	 */
	public function emit(numparticles: Float): Void;

	/**
	 * Gets the maximum number of particles the ParticleSystem can have at once.
	 * @return The maximum number of particles.
	 */
	public function getBufferSize(): Float;

	/**
	 * Gets the series of colors applied to the particle sprite.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 */
	public function getColors(): ParticleSystemGetColorsResult;

	/**
	 * Gets the number of particles that are currently in the system.
	 * @return The current number of live particles.
	 */
	public function getCount(): Float;

	/**
	 * Gets the direction of the particle emitter (in radians).
	 * @return The direction of the emitter (radians).
	 */
	public function getDirection(): Float;

	/**
	 * Gets the area-based spawn parameters for the particles.
	 */
	public function getEmissionArea(): ParticleSystemGetEmissionAreaResult;

	/**
	 * Gets the amount of particles emitted per second.
	 * @return The amount of particles per second.
	 */
	public function getEmissionRate(): Float;

	/**
	 * Gets how long the particle system will emit particles (if -1 then it emits particles forever).
	 * @return The lifetime of the emitter (in seconds).
	 */
	public function getEmitterLifetime(): Float;

	/**
	 * Gets the mode used when the ParticleSystem adds new particles.
	 * @return The mode used when the ParticleSystem adds new particles.
	 */
	public function getInsertMode(): ParticleInsertMode;

	/**
	 * Gets the linear acceleration (acceleration along the x and y axes) for particles.
	 * Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
	 */
	public function getLinearAcceleration(): ParticleSystemGetLinearAccelerationResult;

	/**
	 * Gets the amount of linear damping (constant deceleration) for particles.
	 */
	public function getLinearDamping(): ParticleSystemGetLinearDampingResult;

	/**
	 * Gets the particle image's draw offset.
	 */
	public function getOffset(): ParticleSystemGetOffsetResult;

	/**
	 * Gets the lifetime of the particles.
	 */
	public function getParticleLifetime(): ParticleSystemGetParticleLifetimeResult;

	/**
	 * Gets the position of the emitter.
	 */
	public function getPosition(): ParticleSystemGetPositionResult;

	/**
	 * Gets the series of Quads used for the particle sprites.
	 * @return A table containing the Quads used.
	 */
	public function getQuads(): Table<Dynamic, Dynamic>;

	/**
	 * Gets the radial acceleration (away from the emitter).
	 */
	public function getRadialAcceleration(): ParticleSystemGetRadialAccelerationResult;

	/**
	 * Gets the rotation of the image upon particle creation (in radians).
	 */
	public function getRotation(): ParticleSystemGetRotationResult;

	/**
	 * Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
	 * @return The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
	 */
	public function getSizeVariation(): Float;

	/**
	 * Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.
	 */
	public function getSizes(): ParticleSystemGetSizesResult;

	/**
	 * Gets the speed of the particles.
	 */
	public function getSpeed(): ParticleSystemGetSpeedResult;

	/**
	 * Gets the spin of the sprite.
	 */
	public function getSpin(): ParticleSystemGetSpinResult;

	/**
	 * Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
	 * @return The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
	 */
	public function getSpinVariation(): Float;

	/**
	 * Gets the amount of directional spread of the particle emitter (in radians).
	 * @return The spread of the emitter (radians).
	 */
	public function getSpread(): Float;

	/**
	 * Gets the tangential acceleration (acceleration perpendicular to the particle's direction).
	 */
	public function getTangentialAcceleration(): ParticleSystemGetTangentialAccelerationResult;

	/**
	 * Gets the texture (Image or Canvas) used for the particles.
	 * @return The Image or Canvas used for the particles.
	 */
	public function getTexture(): Texture;

	/**
	 * Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
	 * @return True if relative particle rotation is enabled, false if it's disabled.
	 */
	public function hasRelativeRotation(): Bool;

	/**
	 * Checks whether the particle system is actively emitting particles.
	 * @return True if system is active, false otherwise.
	 */
	public function isActive(): Bool;

	/**
	 * Checks whether the particle system is paused.
	 * @return True if system is paused, false otherwise.
	 */
	public function isPaused(): Bool;

	/**
	 * Checks whether the particle system is stopped.
	 * @return True if system is stopped, false otherwise.
	 */
	public function isStopped(): Bool;

	/**
	 * Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame.
	 * @param x Position along x-axis.
	 * @param y Position along y-axis.
	 */
	public function moveTo(x: Float, y: Float): Void;

	/**
	 * Pauses the particle emitter.
	 */
	public function pause(): Void;

	/**
	 * Resets the particle emitter, removing any existing particles and resetting the lifetime counter.
	 */
	public function reset(): Void;

	/**
	 * Sets the size of the buffer (the max allowed amount of particles in the system).
	 * @param size The buffer size.
	 */
	public function setBufferSize(size: Float): Void;

	/**
	 * Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.
	 * Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param r1 First color, red component (0-1).
	 * @param g1 First color, green component (0-1).
	 * @param b1 First color, blue component (0-1).
	 * @param a1 First color, alpha component (0-1).
	 * @param ... Additional colors.
	 */
	@:overload(function (rgba1: Table<Dynamic, Dynamic>, args: Rest<Table<Dynamic, Dynamic>>): Void {})
	public function setColors(r1: Float, g1: Float, b1: Float, ?a1: Float, args: Rest<Float>): Void;

	/**
	 * Sets the direction the particles will be emitted in.
	 * @param direction The direction of the particles (in radians).
	 */
	public function setDirection(direction: Float): Void;

	/**
	 * Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.
	 * @param distribution The type of distribution for new particles.
	 * @param dx The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.
	 * @param dy The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.
	 * @param angle The angle in radians of the emission area.
	 * @param directionRelativeToCenter True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.
	 */
	public function setEmissionArea(distribution: AreaSpreadDistribution, dx: Float, dy: Float, ?angle: Float, ?directionRelativeToCenter: Bool): Void;

	/**
	 * Sets the amount of particles emitted per second.
	 * @param rate The amount of particles per second.
	 */
	public function setEmissionRate(rate: Float): Void;

	/**
	 * Sets how long the particle system should emit particles (if -1 then it emits particles forever).
	 * @param life The lifetime of the emitter (in seconds).
	 */
	public function setEmitterLifetime(life: Float): Void;

	/**
	 * Sets the mode to use when the ParticleSystem adds new particles.
	 * @param mode The mode to use when the ParticleSystem adds new particles.
	 */
	public function setInsertMode(mode: ParticleInsertMode): Void;

	/**
	 * Sets the linear acceleration (acceleration along the x and y axes) for particles.
	 * Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
	 * @param xmin The minimum acceleration along the x axis.
	 * @param ymin The minimum acceleration along the y axis.
	 * @param xmax The maximum acceleration along the x axis.
	 * @param ymax The maximum acceleration along the y axis.
	 */
	public function setLinearAcceleration(xmin: Float, ymin: Float, ?xmax: Float, ?ymax: Float): Void;

	/**
	 * Sets the amount of linear damping (constant deceleration) for particles.
	 * @param min The minimum amount of linear damping applied to particles.
	 * @param max The maximum amount of linear damping applied to particles.
	 */
	public function setLinearDamping(min: Float, ?max: Float): Void;

	/**
	 * Set the offset position which the particle sprite is rotated around.
	 * If this function is not used, the particles rotate around their center.
	 * @param x The x coordinate of the rotation offset.
	 * @param y The y coordinate of the rotation offset.
	 */
	public function setOffset(x: Float, y: Float): Void;

	/**
	 * Sets the lifetime of the particles.
	 * @param min The minimum life of the particles (in seconds).
	 * @param max The maximum life of the particles (in seconds).
	 */
	public function setParticleLifetime(min: Float, ?max: Float): Void;

	/**
	 * Sets the position of the emitter.
	 * @param x Position along x-axis.
	 * @param y Position along y-axis.
	 */
	public function setPosition(x: Float, y: Float): Void;

	/**
	 * Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.
	 * @param quad1 The first Quad to use.
	 * @param ... Additional Quads to use.
	 */
	@:overload(function (quads: Table<Dynamic, Dynamic>): Void {})
	public function setQuads(quad1: Quad, args: Rest<Quad>): Void;

	/**
	 * Set the radial acceleration (away from the emitter).
	 * @param min The minimum acceleration.
	 * @param max The maximum acceleration.
	 */
	public function setRadialAcceleration(min: Float, ?max: Float): Void;

	/**
	 * Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
	 * @param enable True to enable relative particle rotation, false to disable it.
	 */
	public function setRelativeRotation(enable: Bool): Void;

	/**
	 * Sets the rotation of the image upon particle creation (in radians).
	 * @param min The minimum initial angle (radians).
	 * @param max The maximum initial angle (radians).
	 */
	public function setRotation(min: Float, ?max: Float): Void;

	/**
	 * Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
	 * @param variation The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
	 */
	public function setSizeVariation(variation: Float): Void;

	/**
	 * Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.
	 * At least one size must be specified. A maximum of eight may be used.
	 * @param size1 The first size.
	 * @param size2 The second size.
	 * @param size8 The eighth size.
	 */
	public function setSizes(size1: Float, ?size2: Float, ?size8: Float): Void;

	/**
	 * Sets the speed of the particles.
	 * @param min The minimum linear speed of the particles.
	 * @param max The maximum linear speed of the particles.
	 */
	public function setSpeed(min: Float, ?max: Float): Void;

	/**
	 * Sets the spin of the sprite.
	 * @param min The minimum spin (radians per second).
	 * @param max The maximum spin (radians per second).
	 */
	public function setSpin(min: Float, ?max: Float): Void;

	/**
	 * Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
	 * @param variation The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
	 */
	public function setSpinVariation(variation: Float): Void;

	/**
	 * Sets the amount of spread for the system.
	 * @param spread The amount of spread (radians).
	 */
	public function setSpread(spread: Float): Void;

	/**
	 * Sets the tangential acceleration (acceleration perpendicular to the particle's direction).
	 * @param min The minimum acceleration.
	 * @param max The maximum acceleration.
	 */
	public function setTangentialAcceleration(min: Float, ?max: Float): Void;

	/**
	 * Sets the texture (Image or Canvas) to be used for the particles.
	 * @param texture An Image or Canvas to use for the particles.
	 */
	public function setTexture(texture: Texture): Void;

	/**
	 * Starts the particle emitter.
	 */
	public function start(): Void;

	/**
	 * Stops the particle emitter, resetting the lifetime counter.
	 */
	public function stop(): Void;

	/**
	 * Updates the particle system; moving, creating and killing particles.
	 * @param dt The time (seconds) since last frame.
	 */
	public function update(dt: Float): Void;
}

@:multiReturn
extern class ParticleSystemGetTangentialAccelerationResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetSpinResult {
	var min: Float;
	var max: Float;
	var variation: Float;
}

@:multiReturn
extern class ParticleSystemGetSpeedResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetSizesResult {
	var size1: Float;
	var size2: Float;
	var size8: Float;
}

@:multiReturn
extern class ParticleSystemGetRotationResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetRadialAccelerationResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetPositionResult {
	var x: Float;
	var y: Float;
}

@:multiReturn
extern class ParticleSystemGetParticleLifetimeResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetOffsetResult {
	var ox: Float;
	var oy: Float;
}

@:multiReturn
extern class ParticleSystemGetLinearDampingResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class ParticleSystemGetLinearAccelerationResult {
	var xmin: Float;
	var ymin: Float;
	var xmax: Float;
	var ymax: Float;
}

@:multiReturn
extern class ParticleSystemGetEmissionAreaResult {
	var distribution: AreaSpreadDistribution;
	var dx: Float;
	var dy: Float;
	var angle: Float;
	var directionRelativeToCenter: Bool;
}

@:multiReturn
extern class ParticleSystemGetColorsResult {
	var r1: Float;
	var g1: Float;
	var b1: Float;
	var a1: Float;
	var r2: Float;
	var g2: Float;
	var b2: Float;
	var a2: Float;
	var r8: Float;
	var g8: Float;
	var b8: Float;
	var a8: Float;
}