// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.image.PixelFormat;
import lua.Table;
import lua.UserData;

/**
 * Superclass for drawable objects which represent a texture. All Textures can be drawn with Quads. This is an abstract type that can't be created directly.
 */
extern class Texture extends Drawable {

	/**
	 * Gets the DPI scale factor of the Texture.
	 * The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1.
	 * For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi /  retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic.
	 * @return The DPI scale factor of the Texture.
	 */
	public function getDPIScale(): Float;

	/**
	 * Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures.
	 * @return The depth of the volume Texture.
	 */
	public function getDepth(): Float;

	/**
	 * Gets the comparison mode used when sampling from a depth texture in a shader.
	 * Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.
	 * @return The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture.
	 */
	public function getDepthSampleMode(): CompareMode;

	/**
	 * Gets the width and height of the Texture.
	 */
	public function getDimensions(): TextureGetDimensionsResult;

	/**
	 * Gets the filter mode of the Texture.
	 */
	public function getFilter(): TextureGetFilterResult;

	/**
	 * Gets the pixel format of the Texture.
	 * @return The pixel format the Texture was created with.
	 */
	public function getFormat(): PixelFormat;

	/**
	 * Gets the height of the Texture.
	 * @return The height of the Texture.
	 */
	public function getHeight(): Float;

	/**
	 * Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures.
	 * @return The number of layers in the Array Texture.
	 */
	public function getLayerCount(): Float;

	/**
	 * Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1.
	 * @return The number of mipmaps in the Texture.
	 */
	public function getMipmapCount(): Float;

	/**
	 * Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
	 */
	public function getMipmapFilter(): TextureGetMipmapFilterResult;

	/**
	 * Gets the width and height in pixels of the Texture.
	 * Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData.
	 */
	public function getPixelDimensions(): TextureGetPixelDimensionsResult;

	/**
	 * Gets the height in pixels of the Texture.
	 * DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData.
	 * @return The height of the Texture, in pixels.
	 */
	public function getPixelHeight(): Float;

	/**
	 * Gets the width in pixels of the Texture.
	 * DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData.
	 * @return The width of the Texture, in pixels.
	 */
	public function getPixelWidth(): Float;

	/**
	 * Gets the type of the Texture.
	 * @return The type of the Texture.
	 */
	public function getTextureType(): TextureType;

	/**
	 * Gets the width of the Texture.
	 * @return The width of the Texture.
	 */
	public function getWidth(): Float;

	/**
	 * Gets the wrapping properties of a Texture.
	 * This function returns the currently set horizontal and vertical wrapping modes for the texture.
	 */
	public function getWrap(): TextureGetWrapResult;

	/**
	 * Gets whether the Texture can be drawn and sent to a Shader.
	 * Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas.
	 * Non-readable Canvases can still be rendered to.
	 * @return Whether the Texture is readable.
	 */
	public function isReadable(): Bool;

	/**
	 * Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.
	 * When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation.
	 * Depth texture comparison can only be used with readable depth-formatted Canvases.
	 * @param compare The comparison mode used when sampling from this texture in a shader.
	 */
	public function setDepthSampleMode(compare: CompareMode): Void;

	/**
	 * Sets the filter mode of the Texture.
	 * @param min Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).
	 * @param mag Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).
	 * @param anisotropy Maximum amount of anisotropic filtering to use.
	 */
	public function setFilter(min: FilterMode, ?mag: FilterMode, ?anisotropy: Float): Void;

	/**
	 * Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
	 * Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.
	 * In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.
	 * Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.
	 * @param filtermode The filter mode to use in between mipmap levels. 'nearest' will often give better performance.
	 * @param sharpness A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse.
	 */
	@:overload(function (): Void {})
	public function setMipmapFilter(filtermode: FilterMode, ?sharpness: Float): Void;

	/**
	 * Sets the wrapping properties of a Texture.
	 * This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions.
	 * Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad.
	 * @param horiz Horizontal wrapping mode of the texture.
	 * @param vert Vertical wrapping mode of the texture.
	 * @param depth Wrapping mode for the z-axis of a Volume texture.
	 */
	public function setWrap(horiz: WrapMode, ?vert: WrapMode, ?depth: WrapMode): Void;
}

@:multiReturn
extern class TextureGetWrapResult {
	var horiz: WrapMode;
	var vert: WrapMode;
	var depth: WrapMode;
}

@:multiReturn
extern class TextureGetPixelDimensionsResult {
	var pixelwidth: Float;
	var pixelheight: Float;
}

@:multiReturn
extern class TextureGetMipmapFilterResult {
	var mode: FilterMode;
	var sharpness: Float;
}

@:multiReturn
extern class TextureGetFilterResult {
	var min: FilterMode;
	var mag: FilterMode;
	var anisotropy: Float;
}

@:multiReturn
extern class TextureGetDimensionsResult {
	var width: Float;
	var height: Float;
}