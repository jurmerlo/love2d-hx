// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.image.ImageData;
import lua.Table;
import lua.UserData;

/**
 * Drawable image type.
 */
extern class Image extends Texture {

	/**
	 * Gets whether the Image was created from CompressedData.
	 * Compressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data.
	 * @return Whether the Image is stored as a compressed texture on the GPU.
	 */
	public function isCompressed(): Bool;

	/**
	 * Gets whether the Image was created with the linear (non-gamma corrected) flag set to true.
	 * This method always returns false when gamma-correct rendering is not enabled.
	 * @return Whether the Image's internal pixel format is linear (not gamma corrected), when gamma-correct rendering is enabled.
	 */
	public function isFormatLinear(): Bool;

	/**
	 * Replace the contents of an Image.
	 * @param data The new ImageData to replace the contents with.
	 * @param slice Which cubemap face, array index, or volume layer to replace, if applicable.
	 * @param mipmap The mimap level to replace, if the Image has mipmaps.
	 * @param x The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level.
	 * @param y The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level.
	 * @param reloadmipmaps Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.
	 */
	public function replacePixels(data: ImageData, ?slice: Float, ?mipmap: Float, ?x: Float, ?y: Float, ?reloadmipmaps: Bool): Void;
}