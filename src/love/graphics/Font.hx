// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Defines the shape of characters that can be drawn onto the screen.
 */
extern class Font extends Object {

	/**
	 * Gets the ascent of the Font.
	 * The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline.
	 * @return The ascent of the Font in pixels.
	 */
	public function getAscent(): Float;

	/**
	 * Gets the baseline of the Font.
	 * Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline.
	 * @return The baseline of the Font in pixels.
	 */
	public function getBaseline(): Float;

	/**
	 * Gets the DPI scale factor of the Font.
	 * The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1.
	 * The font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, LÃ–VE uses the screen's DPI scale factor when creating TrueType fonts.
	 * @return The DPI scale factor of the Font.
	 */
	public function getDPIScale(): Float;

	/**
	 * Gets the descent of the Font.
	 * The descent spans the distance between the baseline and the lowest descending glyph in a typeface.
	 * @return The descent of the Font in pixels.
	 */
	public function getDescent(): Float;

	/**
	 * Gets the filter mode for a font.
	 */
	public function getFilter(): FontGetFilterResult;

	/**
	 * Gets the height of the Font.
	 * The height of the font is the size including any spacing; the height which it will need.
	 * @return The height of the Font in pixels.
	 */
	public function getHeight(): Float;

	/**
	 * Gets the kerning between two characters in the Font.
	 * Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.
	 * @param leftchar The left character.
	 * @param rightchar The right character.
	 * @return The kerning amount to add to the spacing between the two characters. May be negative.
	 */
	@:overload(function (leftglyph: Float, rightglyph: Float): Float {})
	public function getKerning(leftchar: String, rightchar: String): Float;

	/**
	 * Gets the line height.
	 * This will be the value previously set by Font:setLineHeight, or 1.0 by default.
	 * @return The current line height.
	 */
	public function getLineHeight(): Float;

	/**
	 * Determines the maximum width (accounting for newlines) taken by the given string.
	 * @param text A string.
	 * @return The width of the text.
	 */
	public function getWidth(text: String): Float;

	/**
	 * Gets formatting information for text, given a wrap limit.
	 * This function accounts for newlines correctly (i.e. '\n').
	 * @param text The text that will be wrapped.
	 * @param wraplimit The maximum width in pixels of each line that ''text'' is allowed before wrapping.
	 */
	@:overload(function (coloredtext: Table<Dynamic, Dynamic>, wraplimit: Float): FontGetWrapResult {})
	public function getWrap(text: String, wraplimit: Float): FontGetWrapResult;

	/**
	 * Gets whether the Font can render a character or string.
	 * @param text A UTF-8 encoded unicode string.
	 * @return Whether the font can render all the UTF-8 characters in the string.
	 */
	@:overload(function (character1: String, character2: String): Bool {})
	@:overload(function (codepoint1: Float, codepoint2: Float): Bool {})
	public function hasGlyphs(text: String): Bool;

	/**
	 * Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS).
	 * @param fallbackfont1 The first fallback Font to use.
	 * @param ... Additional fallback Fonts.
	 */
	public function setFallbacks(fallbackfont1: Font, args: Rest<Font>): Void;

	/**
	 * Sets the filter mode for a font.
	 * @param min How to scale a font down.
	 * @param mag How to scale a font up.
	 * @param anisotropy Maximum amount of anisotropic filtering used.
	 */
	public function setFilter(min: FilterMode, mag: FilterMode, ?anisotropy: Float): Void;

	/**
	 * Sets the line height.
	 * When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0.
	 * @param height The new line height.
	 */
	public function setLineHeight(height: Float): Void;
}