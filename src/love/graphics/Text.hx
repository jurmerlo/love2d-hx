// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Drawable text.
 */
extern class Text extends Drawable {

	/**
	 * Adds additional colored text to the Text object at the specified position.
	 * @param textstring The text to add to the object.
	 * @param x The position of the new text on the x-axis.
	 * @param y The position of the new text on the y-axis.
	 * @param angle The orientation of the new text in radians.
	 * @param sx Scale factor on the x-axis.
	 * @param sy Scale factor on the y-axis.
	 * @param ox Origin offset on the x-axis.
	 * @param oy Origin offset on the y-axis.
	 * @param kx Shearing / skew factor on the x-axis.
	 * @param ky Shearing / skew factor on the y-axis.
	 * @return An index number that can be used with Text:getWidth or Text:getHeight.
	 */
	@:overload(function (coloredtext: Table<Dynamic, Dynamic>, ?x: Float, ?y: Float, ?angle: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float {})
	public function add(textstring: String, ?x: Float, ?y: Float, ?angle: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float;

	/**
	 * Adds additional formatted / colored text to the Text object at the specified position.
	 * The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
	 * @param textstring The text to add to the object.
	 * @param wraplimit The maximum width in pixels of the text before it gets automatically wrapped to a new line.
	 * @param align The alignment of the text.
	 * @param x The position of the new text (x-axis).
	 * @param y The position of the new text (y-axis).
	 * @param angle Orientation (radians).
	 * @param sx Scale factor (x-axis).
	 * @param sy Scale factor (y-axis).
	 * @param ox Origin offset (x-axis).
	 * @param oy Origin offset (y-axis).
	 * @param kx Shearing / skew factor (x-axis).
	 * @param ky Shearing / skew factor (y-axis).
	 * @return An index number that can be used with Text:getWidth or Text:getHeight.
	 */
	@:overload(function (coloredtext: Table<Dynamic, Dynamic>, wraplimit: Float, align: AlignMode, x: Float, y: Float, ?angle: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float {})
	public function addf(textstring: String, wraplimit: Float, align: AlignMode, x: Float, y: Float, ?angle: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float;

	/**
	 * Clears the contents of the Text object.
	 */
	public function clear(): Void;

	/**
	 * Gets the width and height of the text in pixels.
	 */
	@:overload(function (index: Float): TextGetDimensionsResult {})
	public function getDimensions(): TextGetDimensionsResult;

	/**
	 * Gets the Font used with the Text object.
	 * @return The font used with this Text object.
	 */
	public function getFont(): Font;

	/**
	 * Gets the height of the text in pixels.
	 * @return The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned.
	 */
	@:overload(function (index: Float): Float {})
	public function getHeight(): Float;

	/**
	 * Gets the width of the text in pixels.
	 * @return The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned.
	 */
	@:overload(function (index: Float): Float {})
	public function getWidth(): Float;

	/**
	 * Replaces the contents of the Text object with a new unformatted string.
	 * @param textstring The new string of text to use.
	 */
	@:overload(function (coloredtext: Table<Dynamic, Dynamic>): Void {})
	public function set(textstring: String): Void;

	/**
	 * Replaces the Font used with the text.
	 * @param font The new font to use with this Text object.
	 */
	public function setFont(font: Font): Void;

	/**
	 * Replaces the contents of the Text object with a new formatted string.
	 * @param textstring The new string of text to use.
	 * @param wraplimit The maximum width in pixels of the text before it gets automatically wrapped to a new line.
	 * @param align The alignment of the text.
	 */
	@:overload(function (coloredtext: Table<Dynamic, Dynamic>, wraplimit: Float, align: AlignMode): Void {})
	public function setf(textstring: String, wraplimit: Float, align: AlignMode): Void;
}

@:multiReturn
extern class TextGetDimensionsResult {
	var width: Float;
	var height: Float;
}