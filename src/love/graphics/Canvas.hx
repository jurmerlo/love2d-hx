// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.image.ImageData;
import lua.Table;
import lua.UserData;

/**
 * A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as "render to texture".
 * By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item,  you can reduce the number of draw operations performed each frame.
 * In versions prior to love.graphics.isSupported("canvas") could be used to check for support at runtime.
 */
extern class Canvas extends Texture {

	/**
	 * Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.
	 * The Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target.
	 * If the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen.
	 */
	public function generateMipmaps(): Void;

	/**
	 * Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.
	 * This may be different than the number used as an argument to love.graphics.newCanvas if the system running LÃ–VE doesn't support that number.
	 * @return The number of multisample antialiasing samples used by the canvas when drawing to it.
	 */
	public function getMSAA(): Float;

	/**
	 * Gets the MipmapMode this Canvas was created with.
	 * @return The mipmap mode this Canvas was created with.
	 */
	public function getMipmapMode(): MipmapMode;

	/**
	 * Generates ImageData from the contents of the Canvas.
	 * @return The new ImageData made from the Canvas' contents.
	 */
	@:overload(function (slice: Float, ?mipmap: Float, x: Float, y: Float, width: Float, height: Float): ImageData {})
	public function newImageData(): ImageData;

	/**
	 * Render to the Canvas using a function.
	 * This is a shortcut to love.graphics.setCanvas:
	 * canvas:renderTo( func )
	 * is the same as
	 * love.graphics.setCanvas( canvas )
	 * func()
	 * love.graphics.setCanvas()
	 * @param func A function performing drawing operations.
	 * @param ... Additional arguments to call the function with.
	 */
	public function renderTo(func: (args: Rest<Dynamic>) -> Void, args: Rest<Dynamic>): Void;
}