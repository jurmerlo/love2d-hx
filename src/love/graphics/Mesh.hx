// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.Data;
import lua.Table;
import lua.UserData;

/**
 * A 2D polygon mesh used for drawing arbitrary textured shapes.
 */
extern class Mesh extends Drawable {

	/**
	 * Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.
	 * @param name The name of the vertex attribute to attach.
	 * @param mesh The Mesh to get the vertex attribute from.
	 */
	@:overload(function (name: String, mesh: Mesh, ?step: VertexAttributeStep, ?attachname: String): Void {})
	public function attachAttribute(name: String, mesh: Mesh): Void;

	/**
	 * Removes a previously attached vertex attribute from this Mesh.
	 * @param name The name of the attached vertex attribute to detach.
	 * @return Whether the attribute was successfully detached.
	 */
	public function detachAttribute(name: String): Bool;

	/**
	 * Immediately sends all modified vertex data in the Mesh to the graphics card.
	 * Normally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using **Mesh:flush** gives more control over when the work happens.
	 * If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls.
	 */
	public function flush(): Void;

	/**
	 * Gets the mode used when drawing the Mesh.
	 * @return The mode used when drawing the Mesh.
	 */
	public function getDrawMode(): MeshDrawMode;

	/**
	 * Gets the range of vertices used when drawing the Mesh.
	 */
	public function getDrawRange(): MeshGetDrawRangeResult;

	/**
	 * Gets the texture (Image or Canvas) used when drawing the Mesh.
	 * @return The Image or Canvas to texture the Mesh with when drawing, or nil if none is set.
	 */
	public function getTexture(): Texture;

	/**
	 * Gets the properties of a vertex in the Mesh.
	 * In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param index The one-based index of the vertex you want to retrieve the information for.
	 */
	@:overload(function (index: Float): MeshGetVertexResult {})
	public function getVertex(index: Float): MeshGetVertexResult;

	/**
	 * Gets the properties of a specific attribute within a vertex in the Mesh.
	 * Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
	 * @param vertexindex The index of the the vertex you want to retrieve the attribute for (one-based).
	 * @param attributeindex The index of the attribute within the vertex to be retrieved (one-based).
	 */
	public function getVertexAttribute(vertexindex: Float, attributeindex: Float): MeshGetVertexAttributeResult;

	/**
	 * Gets the total number of vertices in the Mesh.
	 * @return The total number of vertices in the mesh.
	 */
	public function getVertexCount(): Float;

	/**
	 * Gets the vertex format that the Mesh was created with.
	 * @return The vertex format of the Mesh, which is a table containing tables for each vertex attribute the Mesh was created with, in the form of {attribute, ...}.
	 */
	public function getVertexFormat(): Table<Dynamic, Dynamic>;

	/**
	 * Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
	 * If no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in LÃ–VE 0.10.0+, or an empty table in 0.9.2 and older.
	 * @return A table containing the list of vertex indices used when drawing.
	 */
	public function getVertexMap(): Table<Dynamic, Dynamic>;

	/**
	 * Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh.
	 * @param name The name of the vertex attribute to be checked.
	 * @return Whether the vertex attribute is used when drawing this Mesh.
	 */
	public function isAttributeEnabled(name: String): Bool;

	/**
	 * Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh.
	 * @param name The name of the vertex attribute to enable or disable.
	 * @param enable Whether the vertex attribute is used when drawing this Mesh.
	 */
	public function setAttributeEnabled(name: String, enable: Bool): Void;

	/**
	 * Sets the mode used when drawing the Mesh.
	 * @param mode The mode to use when drawing the Mesh.
	 */
	public function setDrawMode(mode: MeshDrawMode): Void;

	/**
	 * Restricts the drawn vertices of the Mesh to a subset of the total.
	 * @param start The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.
	 * @param count The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.
	 */
	@:overload(function (): Void {})
	public function setDrawRange(start: Float, count: Float): Void;

	/**
	 * Sets the texture (Image or Canvas) used when drawing the Mesh.
	 * @param texture The Image or Canvas to texture the Mesh with when drawing.
	 */
	@:overload(function (): Void {})
	public function setTexture(texture: Texture): Void;

	/**
	 * Sets the properties of a vertex in the Mesh.
	 * In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param index The index of the the vertex you want to modify (one-based).
	 * @param attributecomponent The first component of the first vertex attribute in the specified vertex.
	 * @param ... Additional components of all vertex attributes in the specified vertex.
	 */
	@:overload(function (index: Float, vertex: Table<Dynamic, Dynamic>): Void {})
	@:overload(function (index: Float, x: Float, y: Float, u: Float, v: Float, ?r: Float, ?g: Float, ?b: Float, ?a: Float): Void {})
	@:overload(function (index: Float, vertex: Table<Dynamic, Dynamic>): Void {})
	public function setVertex(index: Float, attributecomponent: Float, args: Rest<Float>): Void;

	/**
	 * Sets the properties of a specific attribute within a vertex in the Mesh.
	 * Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
	 * @param vertexindex The index of the the vertex to be modified (one-based).
	 * @param attributeindex The index of the attribute within the vertex to be modified (one-based).
	 * @param value1 The new value for the first component of the attribute.
	 * @param value2 The new value for the second component of the attribute.
	 * @param ... Any additional vertex attribute components.
	 */
	public function setVertexAttribute(vertexindex: Float, attributeindex: Float, value1: Float, value2: Float, args: Rest<Float>): Void;

	/**
	 * Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
	 * The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
	 * @param map A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount().
	 */
	@:overload(function (vi1: Float, vi2: Float, vi3: Float): Void {})
	@:overload(function (data: Data, datatype: IndexDataType): Void {})
	public function setVertexMap(map: Table<Dynamic, Dynamic>): Void;

	/**
	 * Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
	 * @param vertices The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.
	 * @param startvertex The index of the first vertex to replace.
	 * @param count Amount of vertices to replace.
	 */
	@:overload(function (data: Data, ?startvertex: Float): Void {})
	@:overload(function (vertices: Table<Dynamic, Dynamic>): Void {})
	public function setVertices(vertices: Table<Dynamic, Dynamic>, ?startvertex: Float, ?count: Float): Void;
}