// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.graphics;
import haxe.extern.Rest;
import love.math.Transform;
import lua.Table;
import lua.UserData;

/**
 * Using a single image, draw any number of identical copies of the image using a single call to love.graphics.draw(). This can be used, for example, to draw repeating copies of a single background image with high performance.
 * A SpriteBatch can be even more useful when the underlying image is a texture atlas (a single image file containing many independent images); by adding Quads to the batch, different sub-images from within the atlas can be drawn.
 */
extern class SpriteBatch extends Drawable {

	/**
	 * Adds a sprite to the batch. Sprites are drawn in the order they are added.
	 * @param x The position to draw the object (x-axis).
	 * @param y The position to draw the object (y-axis).
	 * @param r Orientation (radians).
	 * @param sx Scale factor (x-axis).
	 * @param sy Scale factor (y-axis).
	 * @param ox Origin offset (x-axis).
	 * @param oy Origin offset (y-axis).
	 * @param kx Shear factor (x-axis).
	 * @param ky Shear factor (y-axis).
	 * @return An identifier for the added sprite.
	 */
	@:overload(function (quad: Quad, x: Float, y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float {})
	public function add(x: Float, y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float;

	/**
	 * Adds a sprite to a batch created with an Array Texture.
	 * @param layerindex The index of the layer to use for this sprite.
	 * @param x The position to draw the sprite (x-axis).
	 * @param y The position to draw the sprite (y-axis).
	 * @param r Orientation (radians).
	 * @param sx Scale factor (x-axis).
	 * @param sy Scale factor (y-axis).
	 * @param ox Origin offset (x-axis).
	 * @param oy Origin offset (y-axis).
	 * @param kx Shearing factor (x-axis).
	 * @param ky Shearing factor (y-axis).
	 * @return The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.
	 */
	@:overload(function (layerindex: Float, quad: Quad, ?x: Float, ?y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float {})
	@:overload(function (layerindex: Float, transform: Transform): Float {})
	@:overload(function (layerindex: Float, quad: Quad, transform: Transform): Float {})
	public function addLayer(layerindex: Float, ?x: Float, ?y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Float;

	/**
	 * Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors.
	 * Each sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ).
	 * @param name The name of the vertex attribute to attach.
	 * @param mesh The Mesh to get the vertex attribute from.
	 */
	public function attachAttribute(name: String, mesh: Mesh): Void;

	/**
	 * Removes all sprites from the buffer.
	 */
	public function clear(): Void;

	/**
	 * Immediately sends all new and modified sprite data in the batch to the graphics card.
	 * Normally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens.
	 * If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls.
	 */
	public function flush(): Void;

	/**
	 * Gets the maximum number of sprites the SpriteBatch can hold.
	 * @return The maximum number of sprites the batch can hold.
	 */
	public function getBufferSize(): Float;

	/**
	 * Gets the color that will be used for the next add and set operations.
	 * If no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 */
	public function getColor(): SpriteBatchGetColorResult;

	/**
	 * Gets the number of sprites currently in the SpriteBatch.
	 * @return The number of sprites currently in the batch.
	 */
	public function getCount(): Float;

	/**
	 * Gets the texture (Image or Canvas) used by the SpriteBatch.
	 * @return The Image or Canvas used by the SpriteBatch.
	 */
	public function getTexture(): Texture;

	/**
	 * Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.
	 * @param spriteindex The index of the sprite that will be changed.
	 * @param x The position to draw the object (x-axis).
	 * @param y The position to draw the object (y-axis).
	 * @param r Orientation (radians).
	 * @param sx Scale factor (x-axis).
	 * @param sy Scale factor (y-axis).
	 * @param ox Origin offset (x-axis).
	 * @param oy Origin offset (y-axis).
	 * @param kx Shear factor (x-axis).
	 * @param ky Shear factor (y-axis).
	 */
	@:overload(function (spriteindex: Float, quad: Quad, x: Float, y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Void {})
	public function set(spriteindex: Float, x: Float, y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Void;

	/**
	 * Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.
	 * @param r The amount of red.
	 * @param g The amount of green.
	 * @param b The amount of blue.
	 * @param a The amount of alpha.
	 */
	@:overload(function (): Void {})
	public function setColor(r: Float, g: Float, b: Float, ?a: Float): Void;

	/**
	 * Restricts the drawn sprites in the SpriteBatch to a subset of the total.
	 * @param start The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add.
	 * @param count The number of sprites to draw.
	 */
	@:overload(function (): Void {})
	public function setDrawRange(start: Float, count: Float): Void;

	/**
	 * Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
	 * @param spriteindex The index of the existing sprite to replace.
	 * @param layerindex The index of the layer in the Array Texture to use for this sprite.
	 * @param x The position to draw the sprite (x-axis).
	 * @param y The position to draw the sprite (y-axis).
	 * @param r Orientation (radians).
	 * @param sx Scale factor (x-axis).
	 * @param sy Scale factor (y-axis).
	 * @param ox Origin offset (x-axis).
	 * @param oy Origin offset (y-axis).
	 * @param kx Shearing factor (x-axis).
	 * @param ky Shearing factor (y-axis).
	 */
	@:overload(function (spriteindex: Float, layerindex: Float, quad: Quad, ?x: Float, ?y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Void {})
	@:overload(function (spriteindex: Float, layerindex: Float, transform: Transform): Void {})
	@:overload(function (spriteindex: Float, layerindex: Float, quad: Quad, transform: Transform): Void {})
	public function setLayer(spriteindex: Float, layerindex: Float, ?x: Float, ?y: Float, ?r: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Void;

	/**
	 * Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing.
	 * @param texture The new Image or Canvas to use for the sprites in the batch.
	 */
	public function setTexture(texture: Texture): Void;
}

@:multiReturn
extern class SpriteBatchGetColorResult {
	var r: Float;
	var g: Float;
	var b: Float;
	var a: Float;
}