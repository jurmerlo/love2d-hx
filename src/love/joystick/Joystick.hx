// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.joystick;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Provides an interface to the user's joystick.
 */
@:native('love.joystick')
extern class Joystick {

	/**
	 * Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.
	 * The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.
	 * @param guid The GUID value to get the mapping string for.
	 * @return A string containing the Joystick's gamepad mappings, or nil if the GUID is not recognized as a gamepad.
	 */
	public static function getGamepadMappingString(guid: String): String;

	/**
	 * Gets the number of connected joysticks.
	 * @return The number of connected joysticks.
	 */
	public static function getJoystickCount(): Float;

	/**
	 * Gets a list of connected Joysticks.
	 * @return The list of currently connected Joysticks.
	 */
	public static function getJoysticks(): Table<Dynamic, Dynamic>;

	/**
	 * Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.
	 * It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.
	 * @param filename The filename to load the mappings string from.
	 */
	@:overload(function (mappings: String): Void {})
	public static function loadGamepadMappings(filename: String): Void;

	/**
	 * Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.
	 * The mappings are stored as a string for use with love.joystick.loadGamepadMappings.
	 * @param filename The filename to save the mappings string to.
	 * @return The mappings string that was written to the file.
	 */
	@:overload(function (): String {})
	public static function saveGamepadMappings(filename: String): String;

	/**
	 * Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.
	 * LÃ–VE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.
	 * The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.
	 * @param guid The OS-dependent GUID for the type of Joystick the binding will affect.
	 * @param button The virtual gamepad button to bind.
	 * @param inputtype The type of input to bind the virtual gamepad button to.
	 * @param inputindex The index of the axis, button, or hat to bind the virtual gamepad button to.
	 * @param hatdir The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise.
	 * @return Whether the virtual gamepad button was successfully bound.
	 */
	@:overload(function (guid: String, axis: GamepadAxis, inputtype: JoystickInputType, inputindex: Float, ?hatdir: JoystickHat): Bool {})
	public static function setGamepadMapping(guid: String, button: GamepadButton, inputtype: JoystickInputType, inputindex: Float, ?hatdir: JoystickHat): Bool;
}