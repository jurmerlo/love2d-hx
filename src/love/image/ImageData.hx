// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.image;
import haxe.extern.Rest;
import love.filesystem.FileData;
import lua.Table;
import lua.UserData;

/**
 * Raw (decoded) image data.
 * You can't draw ImageData directly to screen. See Image for that.
 */
extern class ImageData extends Data {

	/**
	 * Encodes the ImageData and optionally writes it to the save directory.
	 * @param format The format to encode the image as.
	 * @param filename The filename to write the file to. If nil, no file will be written but the FileData will still be returned.
	 * @return The encoded image as a new FileData object.
	 */
	@:overload(function (outFile: String): Void {})
	@:overload(function (outFile: String, format: ImageFormat): Void {})
	public function encode(format: ImageFormat, ?filename: String): FileData;

	/**
	 * Gets the width and height of the ImageData in pixels.
	 */
	public function getDimensions(): ImageDataGetDimensionsResult;

	/**
	 * Gets the height of the ImageData in pixels.
	 * @return The height of the ImageData in pixels.
	 */
	public function getHeight(): Float;

	/**
	 * Gets the color of a pixel at a specific position in the image.
	 * Valid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param x The position of the pixel on the x-axis.
	 * @param y The position of the pixel on the y-axis.
	 */
	public function getPixel(x: Float, y: Float): ImageDataGetPixelResult;

	/**
	 * Gets the width of the ImageData in pixels.
	 * @return The width of the ImageData in pixels.
	 */
	public function getWidth(): Float;

	/**
	 * Transform an image by applying a function to every pixel.
	 * This function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData.
	 * The passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel.
	 * function pixelFunction(x, y, r, g, b, a)
	 *     -- template for defining your own pixel mapping function
	 *     -- perform computations giving the new values for r, g, b and a
	 *     -- ...
	 *     return r, g, b, a
	 * end
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param pixelFunction Function to apply to every pixel.
	 * @param x The x-axis of the top-left corner of the area within the ImageData to apply the function to.
	 * @param y The y-axis of the top-left corner of the area within the ImageData to apply the function to.
	 * @param width The width of the area within the ImageData to apply the function to.
	 * @param height The height of the area within the ImageData to apply the function to.
	 */
	public function mapPixel(pixelFunction: (x: Float, y: Float, r: Float, g: Float, b: Float, a: Float) -> Float, ?x: Float, ?y: Float, ?width: Float, ?height: Float): Void;

	/**
	 * Paste into ImageData from another source ImageData.
	 * @param source Source ImageData from which to copy.
	 * @param dx Destination top-left position on x-axis.
	 * @param dy Destination top-left position on y-axis.
	 * @param sx Source top-left position on x-axis.
	 * @param sy Source top-left position on y-axis.
	 * @param sw Source width.
	 * @param sh Source height.
	 */
	public function paste(source: ImageData, dx: Float, dy: Float, sx: Float, sy: Float, sw: Float, sh: Float): Void;

	/**
	 * Sets the color of a pixel at a specific position in the image.
	 * Valid x and y values start at 0 and go up to image width and height minus 1.
	 * In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
	 * @param x The position of the pixel on the x-axis.
	 * @param y The position of the pixel on the y-axis.
	 * @param r The red component (0-1).
	 * @param g The green component (0-1).
	 * @param b The blue component (0-1).
	 * @param a The alpha component (0-1).
	 */
	@:overload(function (x: Float, y: Float, color: Table<Dynamic, Dynamic>): Void {})
	public function setPixel(x: Float, y: Float, r: Float, g: Float, b: Float, a: Float): Void;

	/**
	 * Gets the pixel format of the ImageData.
	 * @return The pixel format the ImageData was created with.
	 */
	public function getFormat(): PixelFormat;
}