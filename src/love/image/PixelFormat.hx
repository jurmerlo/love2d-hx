// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.image;

/**
 * Pixel formats for Textures, ImageData, and CompressedImageData.
 */
enum abstract PixelFormat (String) from String to String {

	/**
	 * Indicates unknown pixel format, used internally.
	 */
	var Unknown = 'unknown';

	/**
	 * Alias for rgba8, or srgba8 if gamma-correct rendering is enabled.
	 */
	var Normal = 'normal';

	/**
	 * A format suitable for high dynamic range content - an alias for the rgba16f format, normally.
	 */
	var Hdr = 'hdr';

	/**
	 * Single-channel (red component) format (8 bpp).
	 */
	var R8 = 'r8';

	/**
	 * Two channels (red and green components) with 8 bits per channel (16 bpp).
	 */
	var Rg8 = 'rg8';

	/**
	 * 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders).
	 */
	var Rgba8 = 'rgba8';

	/**
	 * gamma-correct version of rgba8.
	 */
	var Srgba8 = 'srgba8';

	/**
	 * Single-channel (red component) format (16 bpp).
	 */
	var R16 = 'r16';

	/**
	 * Two channels (red and green components) with 16 bits per channel (32 bpp).
	 */
	var Rg16 = 'rg16';

	/**
	 * 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders).
	 */
	var Rgba16 = 'rgba16';

	/**
	 * Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504].
	 */
	var R16f = 'r16f';

	/**
	 * Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504].
	 */
	var Rg16f = 'rg16f';

	/**
	 * Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504].
	 */
	var Rgba16f = 'rgba16f';

	/**
	 * Floating point single-channel format (32 bpp).
	 */
	var R32f = 'r32f';

	/**
	 * Floating point two-channel format with 32 bits per channel (64 bpp).
	 */
	var Rg32f = 'rg32f';

	/**
	 * Floating point RGBA with 32 bits per channel (128 bpp).
	 */
	var Rgba32f = 'rgba32f';

	/**
	 * Same as rg8, but accessed as (L, L, L, A)
	 */
	var La8 = 'la8';

	/**
	 * 4 bits per channel (16 bpp) RGBA.
	 */
	var Rgba4 = 'rgba4';

	/**
	 * RGB with 5 bits each, and a 1-bit alpha channel (16 bpp).
	 */
	var Rgb5a1 = 'rgb5a1';

	/**
	 * RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format.
	 */
	var Rgb565 = 'rgb565';

	/**
	 * RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).
	 */
	var Rgb10a2 = 'rgb10a2';

	/**
	 * Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024].
	 */
	var Rg11b10f = 'rg11b10f';

	/**
	 * No depth buffer and 8-bit stencil buffer.
	 */
	var Stencil8 = 'stencil8';

	/**
	 * 16-bit depth buffer and no stencil buffer.
	 */
	var Depth16 = 'depth16';

	/**
	 * 24-bit depth buffer and no stencil buffer.
	 */
	var Depth24 = 'depth24';

	/**
	 * 32-bit float depth buffer and no stencil buffer.
	 */
	var Depth32f = 'depth32f';

	/**
	 * 24-bit depth buffer and 8-bit stencil buffer.
	 */
	var Depth24stencil8 = 'depth24stencil8';

	/**
	 * 32-bit float depth buffer and 8-bit stencil buffer.
	 */
	var Depth32fstencil8 = 'depth32fstencil8';

	/**
	 * The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.
	 */
	var DXT1 = 'DXT1';

	/**
	 * The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.
	 */
	var DXT3 = 'DXT3';

	/**
	 * The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.
	 */
	var DXT5 = 'DXT5';

	/**
	 * The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.
	 */
	var BC4 = 'BC4';

	/**
	 * The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
	 */
	var BC4s = 'BC4s';

	/**
	 * The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.
	 */
	var BC5 = 'BC5';

	/**
	 * The signed variant of the BC5 format.
	 */
	var BC5s = 'BC5s';

	/**
	 * The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.
	 */
	var BC6h = 'BC6h';

	/**
	 * The signed variant of the BC6H format. Stores RGB data in the range of +65504.
	 */
	var BC6hs = 'BC6hs';

	/**
	 * The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.
	 */
	var BC7 = 'BC7';

	/**
	 * The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.
	 */
	var ETC1 = 'ETC1';

	/**
	 * The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.
	 */
	var ETC2rgb = 'ETC2rgb';

	/**
	 * The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.
	 */
	var ETC2rgba = 'ETC2rgba';

	/**
	 * The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.
	 */
	var ETC2rgba1 = 'ETC2rgba1';

	/**
	 * The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.
	 */
	var EACr = 'EACr';

	/**
	 * The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
	 */
	var EACrs = 'EACrs';

	/**
	 * The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.
	 */
	var EACrg = 'EACrg';

	/**
	 * The signed two-channel variant of the EAC format.
	 */
	var EACrgs = 'EACrgs';

	/**
	 * The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.
	 */
	var PVR1rgb2 = 'PVR1rgb2';

	/**
	 * The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.
	 */
	var PVR1rgb4 = 'PVR1rgb4';

	/**
	 * The 2 bit per pixel RGBA variant of the PVRTC1 format.
	 */
	var PVR1rgba2 = 'PVR1rgba2';

	/**
	 * The 4 bit per pixel RGBA variant of the PVRTC1 format.
	 */
	var PVR1rgba4 = 'PVR1rgba4';

	/**
	 * The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.
	 */
	var ASTC4x4 = 'ASTC4x4';

	/**
	 * The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.
	 */
	var ASTC5x4 = 'ASTC5x4';

	/**
	 * The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.
	 */
	var ASTC5x5 = 'ASTC5x5';

	/**
	 * The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.
	 */
	var ASTC6x5 = 'ASTC6x5';

	/**
	 * The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.
	 */
	var ASTC6x6 = 'ASTC6x6';

	/**
	 * The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.
	 */
	var ASTC8x5 = 'ASTC8x5';

	/**
	 * The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.
	 */
	var ASTC8x6 = 'ASTC8x6';

	/**
	 * The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.
	 */
	var ASTC8x8 = 'ASTC8x8';

	/**
	 * The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.
	 */
	var ASTC10x5 = 'ASTC10x5';

	/**
	 * The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.
	 */
	var ASTC10x6 = 'ASTC10x6';

	/**
	 * The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.
	 */
	var ASTC10x8 = 'ASTC10x8';

	/**
	 * The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.
	 */
	var ASTC10x10 = 'ASTC10x10';

	/**
	 * The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.
	 */
	var ASTC12x10 = 'ASTC12x10';

	/**
	 * The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.
	 */
	var ASTC12x12 = 'ASTC12x12';
}