// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Contacts are objects created to manage collisions in worlds.
 */
extern class Contact extends Object {

	/**
	 * Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain.
	 * Used together with Fixture:rayCast or ChainShape:getChildEdge.
	 */
	public function getChildren(): ContactGetChildrenResult;

	/**
	 * Gets the two Fixtures that hold the shapes that are in contact.
	 */
	public function getFixtures(): ContactGetFixturesResult;

	/**
	 * Get the friction between two shapes that are in contact.
	 * @return The friction of the contact.
	 */
	public function getFriction(): Float;

	/**
	 * Get the normal vector between two shapes that are in contact.
	 * This function returns the coordinates of a unit vector that points from the first shape to the second.
	 */
	public function getNormal(): ContactGetNormalResult;

	/**
	 * Returns the contact points of the two colliding fixtures. There can be one or two points.
	 */
	public function getPositions(): ContactGetPositionsResult;

	/**
	 * Get the restitution between two shapes that are in contact.
	 * @return The restitution between the two shapes.
	 */
	public function getRestitution(): Float;

	/**
	 * Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback.
	 * @return True if enabled, false otherwise.
	 */
	public function isEnabled(): Bool;

	/**
	 * Returns whether the two colliding fixtures are touching each other.
	 * @return True if they touch or false if not.
	 */
	public function isTouching(): Bool;

	/**
	 * Resets the contact friction to the mixture value of both fixtures.
	 */
	public function resetFriction(): Void;

	/**
	 * Resets the contact restitution to the mixture value of both fixtures.
	 */
	public function resetRestitution(): Void;

	/**
	 * Enables or disables the contact.
	 * @param enabled True to enable or false to disable.
	 */
	public function setEnabled(enabled: Bool): Void;

	/**
	 * Sets the contact friction.
	 * @param friction The contact friction.
	 */
	public function setFriction(friction: Float): Void;

	/**
	 * Sets the contact restitution.
	 * @param restitution The contact restitution.
	 */
	public function setRestitution(restitution: Float): Void;
}

@:multiReturn
extern class ContactGetPositionsResult {
	var x1: Float;
	var y1: Float;
	var x2: Float;
	var y2: Float;
}

@:multiReturn
extern class ContactGetNormalResult {
	var nx: Float;
	var ny: Float;
}

@:multiReturn
extern class ContactGetFixturesResult {
	var fixtureA: Fixture;
	var fixtureB: Fixture;
}

@:multiReturn
extern class ContactGetChildrenResult {
	var indexA: Float;
	var indexB: Float;
}