// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * A ChainShape consists of multiple line segments. It can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.
 * Unlike the PolygonShape, the ChainShape does not have a vertices limit or has to form a convex shape, but self intersections are not supported.
 */
extern class ChainShape extends Shape {

	/**
	 * Returns a child of the shape as an EdgeShape.
	 * @param index The index of the child.
	 * @return The child as an EdgeShape.
	 */
	public function getChildEdge(index: Float): EdgeShape;

	/**
	 * Gets the vertex that establishes a connection to the next shape.
	 * Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
	 */
	public function getNextVertex(): ChainShapeGetNextVertexResult;

	/**
	 * Returns a point of the shape.
	 * @param index The index of the point to return.
	 */
	public function getPoint(index: Float): ChainShapeGetPointResult;

	/**
	 * Returns all points of the shape.
	 */
	public function getPoints(): ChainShapeGetPointsResult;

	/**
	 * Gets the vertex that establishes a connection to the previous shape.
	 * Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
	 */
	public function getPreviousVertex(): ChainShapeGetPreviousVertexResult;

	/**
	 * Returns the number of vertices the shape has.
	 * @return The number of vertices.
	 */
	public function getVertexCount(): Float;

	/**
	 * Sets a vertex that establishes a connection to the next shape.
	 * This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
	 * @param x The x-component of the vertex.
	 * @param y The y-component of the vertex.
	 */
	public function setNextVertex(x: Float, y: Float): Void;

	/**
	 * Sets a vertex that establishes a connection to the previous shape.
	 * This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
	 * @param x The x-component of the vertex.
	 * @param y The y-component of the vertex.
	 */
	public function setPreviousVertex(x: Float, y: Float): Void;
}

@:multiReturn
extern class ChainShapeGetPreviousVertexResult {
	var x: Float;
	var y: Float;
}

@:multiReturn
extern class ChainShapeGetPointsResult {
	var x1: Float;
	var y1: Float;
	var x2: Float;
	var y2: Float;
}

@:multiReturn
extern class ChainShapeGetPointResult {
	var x: Float;
	var y: Float;
}

@:multiReturn
extern class ChainShapeGetNextVertexResult {
	var x: Float;
	var y: Float;
}