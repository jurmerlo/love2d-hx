// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Restricts a point on the second body to a line on the first body.
 */
extern class WheelJoint extends Joint {

	/**
	 * Gets the world-space axis vector of the Wheel Joint.
	 */
	public function getAxis(): WheelJointGetAxisResult;

	/**
	 * Returns the current joint translation speed.
	 * @return The translation speed of the joint in meters per second.
	 */
	public function getJointSpeed(): Float;

	/**
	 * Returns the current joint translation.
	 * @return The translation of the joint in meters.
	 */
	public function getJointTranslation(): Float;

	/**
	 * Returns the maximum motor torque.
	 * @return The maximum torque of the joint motor in newton meters.
	 */
	public function getMaxMotorTorque(): Float;

	/**
	 * Returns the speed of the motor.
	 * @return The speed of the joint motor in radians per second.
	 */
	public function getMotorSpeed(): Float;

	/**
	 * Returns the current torque on the motor.
	 * @param invdt How long the force applies. Usually the inverse time step or 1/dt.
	 * @return The torque on the motor in newton meters.
	 */
	public function getMotorTorque(invdt: Float): Float;

	/**
	 * Returns the damping ratio.
	 * @return The damping ratio.
	 */
	public function getSpringDampingRatio(): Float;

	/**
	 * Returns the spring frequency.
	 * @return The frequency in hertz.
	 */
	public function getSpringFrequency(): Float;

	/**
	 * Checks if the joint motor is running.
	 * @return The status of the joint motor.
	 */
	public function isMotorEnabled(): Bool;

	/**
	 * Sets a new maximum motor torque.
	 * @param maxTorque The new maximum torque for the joint motor in newton meters.
	 */
	public function setMaxMotorTorque(maxTorque: Float): Void;

	/**
	 * Starts and stops the joint motor.
	 * @param enable True turns the motor on and false turns it off.
	 */
	public function setMotorEnabled(enable: Bool): Void;

	/**
	 * Sets a new speed for the motor.
	 * @param speed The new speed for the joint motor in radians per second.
	 */
	public function setMotorSpeed(speed: Float): Void;

	/**
	 * Sets a new damping ratio.
	 * @param ratio The new damping ratio.
	 */
	public function setSpringDampingRatio(ratio: Float): Void;

	/**
	 * Sets a new spring frequency.
	 * @param freq The new frequency in hertz.
	 */
	public function setSpringFrequency(freq: Float): Void;
}