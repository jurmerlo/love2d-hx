// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Attach multiple bodies together to interact in unique ways.
 */
extern class Joint extends Object {

	/**
	 * Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function.
	 * In 0.7.2, when you don't have time to wait for garbage collection, this function 
	 * may be used to free the object immediately.
	 */
	public function destroy(): Void;

	/**
	 * Get the anchor points of the joint.
	 */
	public function getAnchors(): JointGetAnchorsResult;

	/**
	 * Gets the bodies that the Joint is attached to.
	 */
	public function getBodies(): JointGetBodiesResult;

	/**
	 * Gets whether the connected Bodies collide.
	 * @return True if they collide, false otherwise.
	 */
	public function getCollideConnected(): Bool;

	/**
	 * Returns the reaction force in newtons on the second body
	 * @param x How long the force applies. Usually the inverse time step or 1/dt.
	 */
	public function getReactionForce(x: Float): JointGetReactionForceResult;

	/**
	 * Returns the reaction torque on the second body.
	 * @param invdt How long the force applies. Usually the inverse time step or 1/dt.
	 * @return The reaction torque on the second body.
	 */
	public function getReactionTorque(invdt: Float): Float;

	/**
	 * Gets a string representing the type.
	 * @return A string with the name of the Joint type.
	 */
	public function getType(): JointType;

	/**
	 * Returns the Lua value associated with this Joint.
	 * @return The Lua value associated with the Joint.
	 */
	public function getUserData(): Dynamic;

	/**
	 * Gets whether the Joint is destroyed. Destroyed joints cannot be used.
	 * @return Whether the Joint is destroyed.
	 */
	public function isDestroyed(): Bool;

	/**
	 * Associates a Lua value with the Joint.
	 * To delete the reference, explicitly pass nil.
	 * @param value The Lua value to associate with the Joint.
	 */
	public function setUserData(value: Dynamic): Void;
}

@:multiReturn
extern class JointGetReactionForceResult {
	var x: Float;
	var y: Float;
}

@:multiReturn
extern class JointGetBodiesResult {
	var bodyA: Body;
	var bodyB: Body;
}

@:multiReturn
extern class JointGetAnchorsResult {
	var x1: Float;
	var y1: Float;
	var x2: Float;
	var y2: Float;
}