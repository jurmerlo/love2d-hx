// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.
 */
@:native('love.physics')
extern class Physics {

	/**
	 * Returns the two closest points between two fixtures and their distance.
	 * @param fixture1 The first fixture.
	 * @param fixture2 The second fixture.
	 */
	public static function getDistance(fixture1: Fixture, fixture2: Fixture): PhysicsGetDistanceResult;

	/**
	 * Returns the meter scale factor.
	 * All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.
	 * It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.
	 * @return The scale factor as an integer.
	 */
	public static function getMeter(): Float;

	/**
	 * Creates a new body.
	 * There are three types of bodies. 
	 * * Static bodies do not move, have a infinite mass, and can be used for level boundaries. 
	 * * Dynamic bodies are the main actors in the simulation, they collide with everything. 
	 * * Kinematic bodies do not react to forces and only collide with dynamic bodies.
	 * The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.
	 * @param world The world to create the body in.
	 * @param x The x position of the body.
	 * @param y The y position of the body.
	 * @param type The type of the body.
	 * @return A new body.
	 */
	public static function newBody(world: World, ?x: Float, ?y: Float, ?type: BodyType): Body;

	/**
	 * Creates a new ChainShape.
	 * @param loop If the chain should loop back to the first point.
	 * @param x1 The x position of the first point.
	 * @param y1 The y position of the first point.
	 * @param x2 The x position of the second point.
	 * @param y2 The y position of the second point.
	 * @param ... Additional point positions.
	 * @return The new shape.
	 */
	@:overload(function (loop: Bool, points: Table<Dynamic, Dynamic>): ChainShape {})
	public static function newChainShape(loop: Bool, x1: Float, y1: Float, x2: Float, y2: Float, args: Rest<Float>): ChainShape;

	/**
	 * Creates a new CircleShape.
	 * @param radius The radius of the circle.
	 * @return The new shape.
	 */
	@:overload(function (x: Float, y: Float, radius: Float): CircleShape {})
	public static function newCircleShape(radius: Float): CircleShape;

	/**
	 * Creates a DistanceJoint between two bodies.
	 * This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.
	 * @param body1 The first body to attach to the joint.
	 * @param body2 The second body to attach to the joint.
	 * @param x1 The x position of the first anchor point (world space).
	 * @param y1 The y position of the first anchor point (world space).
	 * @param x2 The x position of the second anchor point (world space).
	 * @param y2 The y position of the second anchor point (world space).
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new distance joint.
	 */
	public static function newDistanceJoint(body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ?collideConnected: Bool): DistanceJoint;

	/**
	 * Creates a new EdgeShape.
	 * @param x1 The x position of the first point.
	 * @param y1 The y position of the first point.
	 * @param x2 The x position of the second point.
	 * @param y2 The y position of the second point.
	 * @return The new shape.
	 */
	public static function newEdgeShape(x1: Float, y1: Float, x2: Float, y2: Float): EdgeShape;

	/**
	 * Creates and attaches a Fixture to a body.
	 * Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape.
	 * @param body The body which gets the fixture attached.
	 * @param shape The shape to be copied to the fixture.
	 * @param density The density of the fixture.
	 * @return The new fixture.
	 */
	public static function newFixture(body: Body, shape: Shape, ?density: Float): Fixture;

	/**
	 * Create a friction joint between two bodies. A FrictionJoint applies friction to a body.
	 * @param body1 The first body to attach to the joint.
	 * @param body2 The second body to attach to the joint.
	 * @param x The x position of the anchor point.
	 * @param y The y position of the anchor point.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new FrictionJoint.
	 */
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ?collideConnected: Bool): FrictionJoint {})
	public static function newFrictionJoint(body1: Body, body2: Body, x: Float, y: Float, ?collideConnected: Bool): FrictionJoint;

	/**
	 * Create a GearJoint connecting two Joints.
	 * The gear joint connects two joints that must be either  prismatic or  revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.
	 * The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.
	 * @param joint1 The first joint to connect with a gear joint.
	 * @param joint2 The second joint to connect with a gear joint.
	 * @param ratio The gear ratio.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new gear joint.
	 */
	public static function newGearJoint(joint1: Joint, joint2: Joint, ?ratio: Float, ?collideConnected: Bool): GearJoint;

	/**
	 * Creates a joint between two bodies which controls the relative motion between them.
	 * Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.
	 * @param body1 The first body to attach to the joint.
	 * @param body2 The second body to attach to the joint.
	 * @param correctionFactor The joint's initial position correction factor, in the range of 1.
	 * @return The new MotorJoint.
	 */
	@:overload(function (body1: Body, body2: Body, ?correctionFactor: Float, ?collideConnected: Bool): MotorJoint {})
	public static function newMotorJoint(body1: Body, body2: Body, ?correctionFactor: Float): MotorJoint;

	/**
	 * Create a joint between a body and the mouse.
	 * This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).
	 * The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. 
	 * @param body The body to attach to the mouse.
	 * @param x The x position of the connecting point.
	 * @param y The y position of the connecting point.
	 * @return The new mouse joint.
	 */
	public static function newMouseJoint(body: Body, x: Float, y: Float): MouseJoint;

	/**
	 * Creates a new PolygonShape.
	 * This shape can have 8 vertices at most, and must form a convex shape.
	 * @param x1 The x position of the first point.
	 * @param y1 The y position of the first point.
	 * @param x2 The x position of the second point.
	 * @param y2 The y position of the second point.
	 * @param x3 The x position of the third point.
	 * @param y3 The y position of the third point.
	 * @param ... You can continue passing more point positions to create the PolygonShape.
	 * @return A new PolygonShape.
	 */
	@:overload(function (vertices: Table<Dynamic, Dynamic>): PolygonShape {})
	public static function newPolygonShape(x1: Float, y1: Float, x2: Float, y2: Float, x3: Float, y3: Float, args: Rest<Float>): PolygonShape;

	/**
	 * Creates a PrismaticJoint between two bodies.
	 * A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
	 * @param body1 The first body to connect with a prismatic joint.
	 * @param body2 The second body to connect with a prismatic joint.
	 * @param x The x coordinate of the anchor point.
	 * @param y The y coordinate of the anchor point.
	 * @param ax The x coordinate of the axis vector.
	 * @param ay The y coordinate of the axis vector.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new prismatic joint.
	 */
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ax: Float, ay: Float, ?collideConnected: Bool): PrismaticJoint {})
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ax: Float, ay: Float, ?collideConnected: Bool, ?referenceAngle: Float): PrismaticJoint {})
	public static function newPrismaticJoint(body1: Body, body2: Body, x: Float, y: Float, ax: Float, ay: Float, ?collideConnected: Bool): PrismaticJoint;

	/**
	 * Creates a PulleyJoint to join two bodies to each other and the ground.
	 * The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.
	 * Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method  setMaxLengths  be used to constrain the maximum lengths each side can attain.
	 * @param body1 The first body to connect with a pulley joint.
	 * @param body2 The second body to connect with a pulley joint.
	 * @param gx1 The x coordinate of the first body's ground anchor.
	 * @param gy1 The y coordinate of the first body's ground anchor.
	 * @param gx2 The x coordinate of the second body's ground anchor.
	 * @param gy2 The y coordinate of the second body's ground anchor.
	 * @param x1 The x coordinate of the pulley joint anchor in the first body.
	 * @param y1 The y coordinate of the pulley joint anchor in the first body.
	 * @param x2 The x coordinate of the pulley joint anchor in the second body.
	 * @param y2 The y coordinate of the pulley joint anchor in the second body.
	 * @param ratio The joint ratio.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new pulley joint.
	 */
	public static function newPulleyJoint(body1: Body, body2: Body, gx1: Float, gy1: Float, gx2: Float, gy2: Float, x1: Float, y1: Float, x2: Float, y2: Float, ?ratio: Float, ?collideConnected: Bool): PulleyJoint;

	/**
	 * Shorthand for creating rectangular PolygonShapes. 
	 * By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.
	 * @param width The width of the rectangle.
	 * @param height The height of the rectangle.
	 * @return A new PolygonShape.
	 */
	@:overload(function (x: Float, y: Float, width: Float, height: Float, ?angle: Float): PolygonShape {})
	public static function newRectangleShape(width: Float, height: Float): PolygonShape;

	/**
	 * Creates a pivot joint between two bodies.
	 * This joint connects two bodies to a point around which they can pivot.
	 * @param body1 The first body.
	 * @param body2 The second body.
	 * @param x The x position of the connecting point.
	 * @param y The y position of the connecting point.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new revolute joint.
	 */
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ?collideConnected: Bool, ?referenceAngle: Float): RevoluteJoint {})
	public static function newRevoluteJoint(body1: Body, body2: Body, x: Float, y: Float, ?collideConnected: Bool): RevoluteJoint;

	/**
	 * Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies.
	 * @param body1 The first body to attach to the joint.
	 * @param body2 The second body to attach to the joint.
	 * @param x1 The x position of the first anchor point.
	 * @param y1 The y position of the first anchor point.
	 * @param x2 The x position of the second anchor point.
	 * @param y2 The y position of the second anchor point.
	 * @param maxLength The maximum distance for the bodies.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new RopeJoint.
	 */
	public static function newRopeJoint(body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, maxLength: Float, ?collideConnected: Bool): RopeJoint;

	/**
	 * Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
	 * @param body1 The first body to attach to the joint.
	 * @param body2 The second body to attach to the joint.
	 * @param x The x position of the anchor point (world space).
	 * @param y The y position of the anchor point (world space).
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new WeldJoint.
	 */
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ?collideConnected: Bool): WeldJoint {})
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ?collideConnected: Bool, ?referenceAngle: Float): WeldJoint {})
	public static function newWeldJoint(body1: Body, body2: Body, x: Float, y: Float, ?collideConnected: Bool): WeldJoint;

	/**
	 * Creates a wheel joint.
	 * @param body1 The first body.
	 * @param body2 The second body.
	 * @param x The x position of the anchor point.
	 * @param y The y position of the anchor point.
	 * @param ax The x position of the axis unit vector.
	 * @param ay The y position of the axis unit vector.
	 * @param collideConnected Specifies whether the two bodies should collide with each other.
	 * @return The new WheelJoint.
	 */
	@:overload(function (body1: Body, body2: Body, x1: Float, y1: Float, x2: Float, y2: Float, ax: Float, ay: Float, ?collideConnected: Bool): WheelJoint {})
	public static function newWheelJoint(body1: Body, body2: Body, x: Float, y: Float, ax: Float, ay: Float, ?collideConnected: Bool): WheelJoint;

	/**
	 * Creates a new World.
	 * @param xg The x component of gravity.
	 * @param yg The y component of gravity.
	 * @param sleep Whether the bodies in this world are allowed to sleep.
	 * @return A brave new World.
	 */
	public static function newWorld(?xg: Float, ?yg: Float, ?sleep: Bool): World;

	/**
	 * Sets the pixels to meter scale factor.
	 * All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.
	 * It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.
	 * @param scale The scale factor as an integer.
	 */
	public static function setMeter(scale: Float): Void;
}

@:multiReturn
extern class PhysicsGetDistanceResult {
	var distance: Float;
	var x1: Float;
	var y1: Float;
	var x2: Float;
	var y2: Float;
}