// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.physics;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Restricts relative motion between Bodies to one shared axis.
 */
extern class PrismaticJoint extends Joint {

	/**
	 * Checks whether the limits are enabled.
	 * @return True if enabled, false otherwise.
	 */
	public function areLimitsEnabled(): Bool;

	/**
	 * Gets the world-space axis vector of the Prismatic Joint.
	 */
	public function getAxis(): PrismaticJointGetAxisResult;

	/**
	 * Get the current joint angle speed.
	 * @return Joint angle speed in meters/second.
	 */
	public function getJointSpeed(): Float;

	/**
	 * Get the current joint translation.
	 * @return Joint translation, usually in meters..
	 */
	public function getJointTranslation(): Float;

	/**
	 * Gets the joint limits.
	 */
	public function getLimits(): PrismaticJointGetLimitsResult;

	/**
	 * Gets the lower limit.
	 * @return The lower limit, usually in meters.
	 */
	public function getLowerLimit(): Float;

	/**
	 * Gets the maximum motor force.
	 * @return The maximum motor force, usually in N.
	 */
	public function getMaxMotorForce(): Float;

	/**
	 * Returns the current motor force.
	 * @param invdt How long the force applies. Usually the inverse time step or 1/dt.
	 * @return The force on the motor in newtons.
	 */
	public function getMotorForce(invdt: Float): Float;

	/**
	 * Gets the motor speed.
	 * @return The motor speed, usually in meters per second.
	 */
	public function getMotorSpeed(): Float;

	/**
	 * Gets the reference angle.
	 * @return The reference angle in radians.
	 */
	public function getReferenceAngle(): Float;

	/**
	 * Gets the upper limit.
	 * @return The upper limit, usually in meters.
	 */
	public function getUpperLimit(): Float;

	/**
	 * Checks whether the motor is enabled.
	 * @return True if enabled, false if disabled.
	 */
	public function isMotorEnabled(): Bool;

	/**
	 * Sets the limits.
	 * @param lower The lower limit, usually in meters.
	 * @param upper The upper limit, usually in meters.
	 */
	public function setLimits(lower: Float, upper: Float): Void;

	/**
	 * Enables/disables the joint limit.
	 * @return True if enabled, false if disabled.
	 */
	public function setLimitsEnabled(): Bool;

	/**
	 * Sets the lower limit.
	 * @param lower The lower limit, usually in meters.
	 */
	public function setLowerLimit(lower: Float): Void;

	/**
	 * Set the maximum motor force.
	 * @param f The maximum motor force, usually in N.
	 */
	public function setMaxMotorForce(f: Float): Void;

	/**
	 * Enables/disables the joint motor.
	 * @param enable True to enable, false to disable.
	 */
	public function setMotorEnabled(enable: Bool): Void;

	/**
	 * Sets the motor speed.
	 * @param s The motor speed, usually in meters per second.
	 */
	public function setMotorSpeed(s: Float): Void;

	/**
	 * Sets the upper limit.
	 * @param upper The upper limit, usually in meters.
	 */
	public function setUpperLimit(upper: Float): Void;
}

@:multiReturn
extern class PrismaticJointGetLimitsResult {
	var lower: Float;
	var upper: Float;
}

@:multiReturn
extern class PrismaticJointGetAxisResult {
	var x: Float;
	var y: Float;
}