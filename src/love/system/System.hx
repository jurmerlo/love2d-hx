// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.system;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Provides access to information about the user's system.
 */
@:native('love.system')
extern class System {

	/**
	 * Gets text from the clipboard.
	 * @return The text currently held in the system's clipboard.
	 */
	public static function getClipboardText(): String;

	/**
	 * Gets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)
	 * @return The current operating system. 'OS X', 'Windows', 'Linux', 'Android' or 'iOS'.
	 */
	public static function getOS(): String;

	/**
	 * Gets information about the system's power supply.
	 */
	public static function getPowerInfo(): SystemGetPowerInfoResult;

	/**
	 * Gets the amount of logical processor in the system.
	 * @return Amount of logical processors.
	 */
	public static function getProcessorCount(): Float;

	/**
	 * Gets whether another application on the system is playing music in the background.
	 * Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while LÖVE is open.
	 * @return True if the user is playing music in the background via another app, false otherwise.
	 */
	public static function hasBackgroundMusic(): Bool;

	/**
	 * Opens a URL with the user's web or file browser.
	 * @param url The URL to open. Must be formatted as a proper URL.
	 * @return Whether the URL was opened successfully.
	 */
	public static function openURL(url: String): Bool;

	/**
	 * Puts text in the clipboard.
	 * @param text The new text to hold in the system's clipboard.
	 */
	public static function setClipboardText(text: String): Void;

	/**
	 * Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.
	 * @param seconds The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.
	 */
	public static function vibrate(?seconds: Float): Void;
}

@:multiReturn
extern class SystemGetPowerInfoResult {
	var state: PowerState;
	var percent: Float;
	var seconds: Float;
}