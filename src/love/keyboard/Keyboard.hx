// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.keyboard;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Provides an interface to the user's keyboard.
 */
@:native('love.keyboard')
extern class Keyboard {

	/**
	 * Gets the key corresponding to the given hardware scancode.
	 * Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
	 * Scancodes are useful for creating default controls that have the same physical locations on on all systems.
	 * @param scancode The scancode to get the key from.
	 * @return The key corresponding to the given scancode, or 'unknown' if the scancode doesn't map to a KeyConstant on the current system.
	 */
	public static function getKeyFromScancode(scancode: Scancode): KeyConstant;

	/**
	 * Gets the hardware scancode corresponding to the given key.
	 * Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
	 * Scancodes are useful for creating default controls that have the same physical locations on on all systems.
	 * @param key The key to get the scancode from.
	 * @return The scancode corresponding to the given key, or 'unknown' if the given key has no known physical representation on the current system.
	 */
	public static function getScancodeFromKey(key: KeyConstant): Scancode;

	/**
	 * Gets whether key repeat is enabled.
	 * @return Whether key repeat is enabled.
	 */
	public static function hasKeyRepeat(): Bool;

	/**
	 * Gets whether screen keyboard is supported.
	 * @return Whether screen keyboard is supported.
	 */
	public static function hasScreenKeyboard(): Bool;

	/**
	 * Gets whether text input events are enabled.
	 * @return Whether text input events are enabled.
	 */
	public static function hasTextInput(): Bool;

	/**
	 * Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.
	 * @param key The key to check.
	 * @return True if the key is down, false if not.
	 */
	@:overload(function (key: KeyConstant, args: Rest<KeyConstant>): Bool {})
	public static function isDown(key: KeyConstant): Bool;

	/**
	 * Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.
	 * Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
	 * @param scancode A Scancode to check.
	 * @param ... Additional Scancodes to check.
	 * @return True if any supplied Scancode is down, false if not.
	 */
	public static function isScancodeDown(scancode: Scancode, args: Rest<Scancode>): Bool;

	/**
	 * Enables or disables key repeat for love.keypressed. It is disabled by default.
	 * @param enable Whether repeat keypress events should be enabled when a key is held down.
	 */
	public static function setKeyRepeat(enable: Bool): Void;

	/**
	 * Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.
	 * On touch devices, this shows the system's native on-screen keyboard when it's enabled.
	 * @param enable Whether text input events should be enabled.
	 */
	@:overload(function (enable: Bool, x: Float, y: Float, w: Float, h: Float): Void {})
	public static function setTextInput(enable: Bool): Void;
}