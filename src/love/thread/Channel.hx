// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.thread;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * An object which can be used to send and receive data between different threads.
 */
extern class Channel extends Object {

	/**
	 * Clears all the messages in the Channel queue.
	 */
	public function clear(): Void;

	/**
	 * Retrieves the value of a Channel message and removes it from the message queue.
	 * It waits until a message is in the queue then returns the message value.
	 * @return The contents of the message.
	 */
	@:overload(function (timeout: Float): Dynamic {})
	public function demand(): Dynamic;

	/**
	 * Retrieves the number of messages in the thread Channel queue.
	 * @return The number of messages in the queue.
	 */
	public function getCount(): Float;

	/**
	 * Gets whether a pushed value has been popped or otherwise removed from the Channel.
	 * @param id An id value previously returned by Channel:push.
	 * @return Whether the value represented by the id has been removed from the Channel via Channel:pop, Channel:demand, or Channel:clear.
	 */
	public function hasRead(id: Float): Bool;

	/**
	 * Retrieves the value of a Channel message, but leaves it in the queue.
	 * It returns nil if there's no message in the queue.
	 * @return The contents of the message.
	 */
	public function peek(): Dynamic;

	/**
	 * Executes the specified function atomically with respect to this Channel.
	 * Calling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.)
	 * This method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned.
	 * @param func The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called.
	 * @param ... Additional arguments that the given function will receive when it is called.
	 */
	public function performAtomic(func: (channel: Channel, ...: Dynamic) -> Dynamic, args: Rest<Dynamic>): ChannelPerformAtomicResult;

	/**
	 * Retrieves the value of a Channel message and removes it from the message queue.
	 * It returns nil if there are no messages in the queue.
	 * @return The contents of the message.
	 */
	public function pop(): Dynamic;

	/**
	 * Send a message to the thread Channel.
	 * See Variant for the list of supported types.
	 * @param value The contents of the message.
	 * @return Identifier which can be supplied to Channel:hasRead
	 */
	public function push(value: Dynamic): Float;

	/**
	 * Send a message to the thread Channel and wait for a thread to accept it.
	 * See Variant for the list of supported types.
	 * @param value The contents of the message.
	 * @return Whether the message was successfully supplied (always true).
	 */
	@:overload(function (value: Dynamic, timeout: Float): Bool {})
	public function supply(value: Dynamic): Bool;
}