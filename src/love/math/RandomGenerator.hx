// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.math;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * A random number generation object which has its own random state.
 */
extern class RandomGenerator extends Object {

	/**
	 * Gets the seed of the random number generator object.
	 * The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed value is an integer number in the range of 2^64 - 1.
	 */
	public function getSeed(): RandomGeneratorGetSeedResult;

	/**
	 * Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of LÖVE.
	 * This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.
	 * @return The current state of the RandomGenerator object, represented as a string.
	 */
	public function getState(): String;

	/**
	 * Generates a pseudo-random number in a platform independent manner.
	 * @return The pseudo-random number.
	 */
	@:overload(function (max: Float): Float {})
	@:overload(function (min: Float, max: Float): Float {})
	public function random(): Float;

	/**
	 * Get a normally distributed pseudo random number.
	 * @param stddev Standard deviation of the distribution.
	 * @param mean The mean of the distribution.
	 * @return Normally distributed random number with variance (stddev)² and the specified mean.
	 */
	public function randomNormal(?stddev: Float, ?mean: Float): Float;

	/**
	 * Sets the seed of the random number generator using the specified integer number.
	 * @param seed The integer number with which you want to seed the randomization. Must be within the range of 2^53.
	 */
	@:overload(function (low: Float, high: Float): Void {})
	public function setSeed(seed: Float): Void;

	/**
	 * Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of LÖVE.
	 * This is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value.
	 * @param state The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState.
	 */
	public function setState(state: String): Void;
}

@:multiReturn
extern class RandomGeneratorGetSeedResult {
	var low: Float;
	var high: Float;
}