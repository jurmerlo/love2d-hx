// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.math;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Object containing a coordinate system transformation.
 * The love.graphics module has several functions and function variants which accept Transform objects.
 */
extern class Transform extends Object {

	/**
	 * Applies the given other Transform object to this one.
	 * This effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object.
	 * @param other The other Transform object to apply to this Transform.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function apply(other: Transform): Transform;

	/**
	 * Creates a new copy of this Transform.
	 * @return The copy of this Transform.
	 */
	public function clone(): Transform;

	/**
	 * Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order.
	 */
	public function getMatrix(): TransformGetMatrixResult;

	/**
	 * Creates a new Transform containing the inverse of this Transform.
	 * @return A new Transform object representing the inverse of this Transform's matrix.
	 */
	public function inverse(): Transform;

	/**
	 * Applies the reverse of the Transform object's transformation to the given 2D position.
	 * This effectively converts the given position from the local coordinate space of the Transform into global coordinates.
	 * One use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game.
	 * @param localX The x component of the position with the transform applied.
	 * @param localY The y component of the position with the transform applied.
	 */
	public function inverseTransformPoint(localX: Float, localY: Float): TransformInverseTransformPointResult;

	/**
	 * Checks whether the Transform is an affine transformation.
	 * @return true if the transform object is an affine transformation, false otherwise.
	 */
	public function isAffine2DTransform(): Bool;

	/**
	 * Resets the Transform to an identity state. All previously applied transformations are erased.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function reset(): Transform;

	/**
	 * Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations.
	 * @param angle The relative angle in radians to rotate this Transform by.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function rotate(angle: Float): Transform;

	/**
	 * Scales the Transform's coordinate system. This method does not reset any previously applied transformations.
	 * @param sx The relative scale factor along the x-axis.
	 * @param sy The relative scale factor along the y-axis.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function scale(sx: Float, ?sy: Float): Transform;

	/**
	 * Directly sets the Transform's internal 4x4 transformation matrix.
	 * @param e1_1 The first column of the first row of the matrix.
	 * @param e1_2 The second column of the first row of the matrix.
	 * @param e1_3 The third column of the first row of the matrix.
	 * @param e1_4 The fourth column of the first row of the matrix.
	 * @param e2_1 The first column of the second row of the matrix.
	 * @param e2_2 The second column of the second row of the matrix.
	 * @param e2_3 The third column of the second row of the matrix.
	 * @param e2_4 The fourth column of the second row of the matrix.
	 * @param e3_1 The first column of the third row of the matrix.
	 * @param e3_2 The second column of the third row of the matrix.
	 * @param e3_3 The third column of the third row of the matrix.
	 * @param e3_4 The fourth column of the third row of the matrix.
	 * @param e4_1 The first column of the fourth row of the matrix.
	 * @param e4_2 The second column of the fourth row of the matrix.
	 * @param e4_3 The third column of the fourth row of the matrix.
	 * @param e4_4 The fourth column of the fourth row of the matrix.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	@:overload(function (layout: MatrixLayout, e1_1: Float, e1_2: Float, e1_3: Float, e1_4: Float, e2_1: Float, e2_2: Float, e2_3: Float, e2_4: Float, e3_1: Float, e3_2: Float, e3_3: Float, e3_4: Float, e4_1: Float, e4_2: Float, e4_3: Float, e4_4: Float): Transform {})
	@:overload(function (layout: MatrixLayout, matrix: Table<Dynamic, Dynamic>): Transform {})
	@:overload(function (layout: MatrixLayout, matrix: Table<Dynamic, Dynamic>): Transform {})
	public function setMatrix(e1_1: Float, e1_2: Float, e1_3: Float, e1_4: Float, e2_1: Float, e2_2: Float, e2_3: Float, e2_4: Float, e3_1: Float, e3_2: Float, e3_3: Float, e3_4: Float, e4_1: Float, e4_2: Float, e4_3: Float, e4_4: Float): Transform;

	/**
	 * Resets the Transform to the specified transformation parameters.
	 * @param x The position of the Transform on the x-axis.
	 * @param y The position of the Transform on the y-axis.
	 * @param angle The orientation of the Transform in radians.
	 * @param sx Scale factor on the x-axis.
	 * @param sy Scale factor on the y-axis.
	 * @param ox Origin offset on the x-axis.
	 * @param oy Origin offset on the y-axis.
	 * @param kx Shearing / skew factor on the x-axis.
	 * @param ky Shearing / skew factor on the y-axis.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function setTransformation(x: Float, y: Float, ?angle: Float, ?sx: Float, ?sy: Float, ?ox: Float, ?oy: Float, ?kx: Float, ?ky: Float): Transform;

	/**
	 * Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations.
	 * @param kx The shear factor along the x-axis.
	 * @param ky The shear factor along the y-axis.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function shear(kx: Float, ky: Float): Transform;

	/**
	 * Applies the Transform object's transformation to the given 2D position.
	 * This effectively converts the given position from global coordinates into the local coordinate space of the Transform.
	 * @param globalX The x component of the position in global coordinates.
	 * @param globalY The y component of the position in global coordinates.
	 */
	public function transformPoint(globalX: Float, globalY: Float): TransformTransformPointResult;

	/**
	 * Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations.
	 * @param dx The relative translation along the x-axis.
	 * @param dy The relative translation along the y-axis.
	 * @return The Transform object the method was called on. Allows easily chaining Transform methods.
	 */
	public function translate(dx: Float, dy: Float): Transform;
}