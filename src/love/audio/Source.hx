// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.audio;
import haxe.extern.Rest;
import love.sound.SoundData;
import lua.Table;
import lua.UserData;

/**
 * A Source represents audio you can play back.
 * You can do interesting things with Sources, like set the volume, pitch, and its position relative to the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.
 * The Source controls (play/pause/stop) act according to the following state table.
 */
extern class Source extends Object {

	/**
	 * Creates an identical copy of the Source in the stopped state.
	 * Static Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound.
	 * @return The new identical copy of this Source.
	 */
	public function clone(): Source;

	/**
	 * Gets a list of the Source's active effect names.
	 * @return A list of the source's active effect names.
	 */
	public function getActiveEffects(): Table<Dynamic, Dynamic>;

	/**
	 * Gets the amount of air absorption applied to the Source.
	 * By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.
	 * @return The amount of air absorption applied to the Source.
	 */
	public function getAirAbsorption(): Float;

	/**
	 * Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener.
	 */
	public function getAttenuationDistances(): SourceGetAttenuationDistancesResult;

	/**
	 * Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.
	 * @return 1 for mono, 2 for stereo.
	 */
	public function getChannelCount(): Float;

	/**
	 * Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
	 */
	public function getCone(): SourceGetConeResult;

	/**
	 * Gets the direction of the Source.
	 */
	public function getDirection(): SourceGetDirectionResult;

	/**
	 * Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all.
	 * @param unit The time unit for the return value.
	 * @return The duration of the Source, or -1 if it cannot be determined.
	 */
	public function getDuration(?unit: TimeUnit): Float;

	/**
	 * Gets the filter settings associated to a specific effect.
	 * This function returns nil if the effect was applied with no filter settings associated to it.
	 * @param name The name of the effect.
	 * @param filtersettings An optional empty table that will be filled with the filter settings.
	 * @return The settings for the filter associated to this effect, or nil if the effect is not present in this Source or has no filter associated. The table has the following fields:
	 */
	public function getEffect(name: String, ?filtersettings: Table<Dynamic, Dynamic>): Table<Dynamic, Dynamic>;

	/**
	 * Gets the filter settings currently applied to the Source.
	 * @return The filter settings to use for this Source, or nil if the Source has no active filter. The table has the following fields:
	 */
	public function getFilter(): Table<Dynamic, Dynamic>;

	/**
	 * Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with.
	 * @return How many more SoundData objects can be queued up.
	 */
	public function getFreeBufferCount(): Float;

	/**
	 * Gets the current pitch of the Source.
	 * @return The pitch, where 1.0 is normal.
	 */
	public function getPitch(): Float;

	/**
	 * Gets the position of the Source.
	 */
	public function getPosition(): SourceGetPositionResult;

	/**
	 * Returns the rolloff factor of the source.
	 * @return The rolloff factor.
	 */
	public function getRolloff(): Float;

	/**
	 * Gets the type of the Source.
	 * @return The type of the source.
	 */
	public function getType(): SourceType;

	/**
	 * Gets the velocity of the Source.
	 */
	public function getVelocity(): SourceGetVelocityResult;

	/**
	 * Gets the current volume of the Source.
	 * @return The volume of the Source, where 1.0 is normal volume.
	 */
	public function getVolume(): Float;

	/**
	 * Returns the volume limits of the source.
	 */
	public function getVolumeLimits(): SourceGetVolumeLimitsResult;

	/**
	 * Returns whether the Source will loop.
	 * @return True if the Source will loop, false otherwise.
	 */
	public function isLooping(): Bool;

	/**
	 * Returns whether the Source is playing.
	 * @return True if the Source is playing, false otherwise.
	 */
	public function isPlaying(): Bool;

	/**
	 * Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener.
	 * @return True if the position, velocity, direction and cone angles are relative to the listener, false if they're absolute.
	 */
	public function isRelative(): Bool;

	/**
	 * Pauses the Source.
	 */
	public function pause(): Void;

	/**
	 * Starts playing the Source.
	 * @return Whether the Source was able to successfully start playing.
	 */
	public function play(): Bool;

	/**
	 * Queues SoundData for playback in a queueable Source.
	 * This method requires the Source to be created via love.audio.newQueueableSource.
	 * @param sounddata The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.
	 * @return True if the data was successfully queued for playback, false if there were no available buffers to use for queueing.
	 */
	public function queue(sounddata: SoundData): Bool;

	/**
	 * Sets the currently playing position of the Source.
	 * @param offset The position to seek to.
	 * @param unit The unit of the position value.
	 */
	public function seek(offset: Float, ?unit: TimeUnit): Void;

	/**
	 * Sets the amount of air absorption applied to the Source.
	 * By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.
	 * Air absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area.
	 * @param amount The amount of air absorption applied to the Source. Must be between 0 and 10.
	 */
	public function setAirAbsorption(amount: Float): Void;

	/**
	 * Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance.
	 * Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio.
	 * @param ref The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance.
	 * @param max The new maximum attenuation distance.
	 */
	public function setAttenuationDistances(ref: Float, max: Float): Void;

	/**
	 * Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
	 * @param innerAngle The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.
	 * @param outerAngle The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.
	 * @param outerVolume The Source's volume when the listener is outside both the inner and outer cone angles.
	 */
	public function setCone(innerAngle: Float, outerAngle: Float, ?outerVolume: Float): Void;

	/**
	 * Sets the direction vector of the Source. A zero vector makes the source non-directional.
	 * @param x The X part of the direction vector.
	 * @param y The Y part of the direction vector.
	 * @param z The Z part of the direction vector.
	 */
	public function setDirection(x: Float, y: Float, z: Float): Void;

	/**
	 * Applies an audio effect to the Source.
	 * The effect must have been previously defined using love.audio.setEffect.
	 * @param name The name of the effect previously set up with love.audio.setEffect.
	 * @param enable If false and the given effect name was previously enabled on this Source, disables the effect.
	 * @return Whether the effect was successfully applied to this Source.
	 */
	@:overload(function (name: String, filtersettings: Table<Dynamic, Dynamic>): Bool {})
	public function setEffect(name: String, ?enable: Bool): Bool;

	/**
	 * Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.
	 * @param settings The filter settings to use for this Source, with the following fields:
	 * @return Whether the filter was successfully applied to the Source.
	 */
	@:overload(function (): Void {})
	public function setFilter(settings: Table<Dynamic, Dynamic>): Bool;

	/**
	 * Sets whether the Source should loop.
	 * @param loop True if the source should loop, false otherwise.
	 */
	public function setLooping(loop: Bool): Void;

	/**
	 * Sets the pitch of the Source.
	 * @param pitch Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.
	 */
	public function setPitch(pitch: Float): Void;

	/**
	 * Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files!
	 * @param x The X position of the Source.
	 * @param y The Y position of the Source.
	 * @param z The Z position of the Source.
	 */
	public function setPosition(x: Float, y: Float, z: Float): Void;

	/**
	 * Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute.
	 * By default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. 
	 * @param enable True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.
	 */
	public function setRelative(?enable: Bool): Void;

	/**
	 * Sets the rolloff factor which affects the strength of the used distance attenuation.
	 * Extended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification.
	 * @param rolloff The new rolloff factor.
	 */
	public function setRolloff(rolloff: Float): Void;

	/**
	 * Sets the velocity of the Source.
	 * This does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect.
	 * @param x The X part of the velocity vector.
	 * @param y The Y part of the velocity vector.
	 * @param z The Z part of the velocity vector.
	 */
	public function setVelocity(x: Float, y: Float, z: Float): Void;

	/**
	 * Sets the current volume of the Source.
	 * @param volume The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.
	 */
	public function setVolume(volume: Float): Void;

	/**
	 * Sets the volume limits of the source. The limits have to be numbers from 0 to 1.
	 * @param min The minimum volume.
	 * @param max The maximum volume.
	 */
	public function setVolumeLimits(min: Float, max: Float): Void;

	/**
	 * Stops a Source.
	 */
	public function stop(): Void;

	/**
	 * Gets the currently playing position of the Source.
	 * @param unit The type of unit for the return value.
	 * @return The currently playing position of the Source.
	 */
	public function tell(?unit: TimeUnit): Float;
}

@:multiReturn
extern class SourceGetVolumeLimitsResult {
	var min: Float;
	var max: Float;
}

@:multiReturn
extern class SourceGetVelocityResult {
	var x: Float;
	var y: Float;
	var z: Float;
}

@:multiReturn
extern class SourceGetPositionResult {
	var x: Float;
	var y: Float;
	var z: Float;
}

@:multiReturn
extern class SourceGetDirectionResult {
	var x: Float;
	var y: Float;
	var z: Float;
}

@:multiReturn
extern class SourceGetConeResult {
	var innerAngle: Float;
	var outerAngle: Float;
	var outerVolume: Float;
}

@:multiReturn
extern class SourceGetAttenuationDistancesResult {
	var ref: Float;
	var max: Float;
}