// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.audio;
import haxe.extern.Rest;
import love.filesystem.File;
import love.filesystem.FileData;
import love.sound.Decoder;
import love.sound.SoundData;
import lua.Table;
import lua.UserData;

/**
 * Provides an interface to create noise with the user's speakers.
 */
@:native('love.audio')
extern class Audio {

	/**
	 * Gets a list of the names of the currently enabled effects.
	 * @return The list of the names of the currently enabled effects.
	 */
	public static function getActiveEffects(): Table<Dynamic, Dynamic>;

	/**
	 * Gets the current number of simultaneously playing sources.
	 * @return The current number of simultaneously playing sources.
	 */
	public static function getActiveSourceCount(): Float;

	/**
	 * Returns the distance attenuation model.
	 * @return The current distance model. The default is 'inverseclamped'.
	 */
	public static function getDistanceModel(): DistanceModel;

	/**
	 * Gets the current global scale factor for velocity-based doppler effects.
	 * @return The current doppler scale factor.
	 */
	public static function getDopplerScale(): Float;

	/**
	 * Gets the settings associated with an effect.
	 * @param name The name of the effect.
	 * @return The settings associated with the effect.
	 */
	public static function getEffect(name: String): Table<Dynamic, Dynamic>;

	/**
	 * Gets the maximum number of active effects supported by the system.
	 * @return The maximum number of active effects.
	 */
	public static function getMaxSceneEffects(): Float;

	/**
	 * Gets the maximum number of active Effects in a single Source object, that the system can support.
	 * @return The maximum number of active Effects per Source.
	 */
	public static function getMaxSourceEffects(): Float;

	/**
	 * Returns the orientation of the listener.
	 */
	public static function getOrientation(): AudioGetOrientationResult;

	/**
	 * Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.
	 */
	public static function getPosition(): AudioGetPositionResult;

	/**
	 * Gets a list of RecordingDevices on the system.
	 * The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.
	 * Audio recording is currently not supported on iOS.
	 * @return The list of connected recording devices.
	 */
	public static function getRecordingDevices(): Table<Dynamic, Dynamic>;

	/**
	 * Returns the velocity of the listener.
	 */
	public static function getVelocity(): AudioGetVelocityResult;

	/**
	 * Returns the master volume.
	 * @return The current master volume
	 */
	public static function getVolume(): Float;

	/**
	 * Gets whether audio effects are supported in the system.
	 * @return True if effects are supported, false otherwise.
	 */
	public static function isEffectsSupported(): Bool;

	/**
	 * Creates a new Source usable for real-time generated sound playback with Source:queue.
	 * @param samplerate Number of samples per second when playing.
	 * @param bitdepth Bits per sample (8 or 16).
	 * @param channels 1 for mono or 2 for stereo.
	 * @param buffercount The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified.
	 * @return The new Source usable with Source:queue.
	 */
	public static function newQueueableSource(samplerate: Float, bitdepth: Float, channels: Float, ?buffercount: Float): Source;

	/**
	 * Creates a new Source from a filepath, File, Decoder or SoundData.
	 * Sources created from SoundData are always static.
	 * @param filename The filepath to the audio file.
	 * @param type Streaming or static source.
	 * @return A new Source that can play the specified audio.
	 */
	@:overload(function (file: File, type: SourceType): Source {})
	@:overload(function (decoder: Decoder, type: SourceType): Source {})
	@:overload(function (data: FileData, type: SourceType): Source {})
	@:overload(function (data: SoundData): Source {})
	public static function newSource(filename: String, type: SourceType): Source;

	/**
	 * Pauses specific or all currently played Sources.
	 * @return A table containing a list of Sources that were paused by this call.
	 */
	@:overload(function (source: Source, args: Rest<Source>): Void {})
	@:overload(function (sources: Table<Dynamic, Dynamic>): Void {})
	public static function pause(): Table<Dynamic, Dynamic>;

	/**
	 * Plays the specified Source.
	 * @param source The Source to play.
	 */
	@:overload(function (sources: Table<Dynamic, Dynamic>): Void {})
	@:overload(function (source1: Source, source2: Source, args: Rest<Source>): Void {})
	public static function play(source: Source): Void;

	/**
	 * Sets the distance attenuation model.
	 * @param model The new distance model.
	 */
	public static function setDistanceModel(model: DistanceModel): Void;

	/**
	 * Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.
	 * @param scale The new doppler scale factor. The scale must be greater than 0.
	 */
	public static function setDopplerScale(scale: Float): Void;

	/**
	 * Defines an effect that can be applied to a Source.
	 * Not all system supports audio effects. Use love.audio.isEffectsSupported to check.
	 * @param name The name of the effect.
	 * @param settings The settings to use for this effect, with the following fields:
	 * @return Whether the effect was successfully created.
	 */
	@:overload(function (name: String, ?enabled: Bool): Bool {})
	public static function setEffect(name: String, settings: Table<Dynamic, Dynamic>): Bool;

	/**
	 * Sets whether the system should mix the audio with the system's audio.
	 * @param mix True to enable mixing, false to disable it.
	 * @return True if the change succeeded, false otherwise.
	 */
	public static function setMixWithSystem(mix: Bool): Bool;

	/**
	 * Sets the orientation of the listener.
	 * @param fx, fy, fz Forward vector of the listener orientation.
	 * @param ux, uy, uz Up vector of the listener orientation.
	 */
	public static function setOrientation(fx: Float, fy: Float, fz: Float, ux: Float, uy: Float, uz: Float): Void;

	/**
	 * Sets the position of the listener, which determines how sounds play.
	 * @param x The x position of the listener.
	 * @param y The y position of the listener.
	 * @param z The z position of the listener.
	 */
	public static function setPosition(x: Float, y: Float, z: Float): Void;

	/**
	 * Sets the velocity of the listener.
	 * @param x The X velocity of the listener.
	 * @param y The Y velocity of the listener.
	 * @param z The Z velocity of the listener.
	 */
	public static function setVelocity(x: Float, y: Float, z: Float): Void;

	/**
	 * Sets the master volume.
	 * @param volume 1.0 is max and 0.0 is off.
	 */
	public static function setVolume(volume: Float): Void;

	/**
	 * Stops currently played sources.
	 */
	@:overload(function (source: Source): Void {})
	@:overload(function (source1: Source, source2: Source, args: Rest<Source>): Void {})
	@:overload(function (sources: Table<Dynamic, Dynamic>): Void {})
	public static function stop(): Void;
}

@:multiReturn
extern class AudioGetVelocityResult {
	var x: Float;
	var y: Float;
	var z: Float;
}

@:multiReturn
extern class AudioGetPositionResult {
	var x: Float;
	var y: Float;
	var z: Float;
}

@:multiReturn
extern class AudioGetOrientationResult {
	var fx: Float;
	var fy: Float;
	var fz: Float;
	var ux: Float;
	var uy: Float;
	var uz: Float;
}