// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.audio;
import haxe.extern.Rest;
import love.sound.SoundData;
import lua.Table;
import lua.UserData;

/**
 * Represents an audio input device capable of recording sounds.
 */
extern class RecordingDevice extends Object {

	/**
	 * Gets the number of bits per sample in the data currently being recorded.
	 * @return The number of bits per sample in the data that's currently being recorded.
	 */
	public function getBitDepth(): Float;

	/**
	 * Gets the number of channels currently being recorded (mono or stereo).
	 * @return The number of channels being recorded (1 for mono, 2 for stereo).
	 */
	public function getChannelCount(): Float;

	/**
	 * Gets all recorded audio SoundData stored in the device's internal ring buffer.
	 * The internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost.
	 * @return The recorded audio data, or nil if the device isn't recording.
	 */
	public function getData(): SoundData;

	/**
	 * Gets the name of the recording device.
	 * @return The name of the device.
	 */
	public function getName(): String;

	/**
	 * Gets the number of currently recorded samples.
	 * @return The number of samples that have been recorded so far.
	 */
	public function getSampleCount(): Float;

	/**
	 * Gets the number of samples per second currently being recorded.
	 * @return The number of samples being recorded per second (sample rate).
	 */
	public function getSampleRate(): Float;

	/**
	 * Gets whether the device is currently recording.
	 * @return True if the recording, false otherwise.
	 */
	public function isRecording(): Bool;

	/**
	 * Begins recording audio using this device.
	 * @param samplecount The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called.
	 * @param samplerate The number of samples per second to store when recording.
	 * @param bitdepth The number of bits per sample.
	 * @param channels Whether to record in mono or stereo. Most microphones don't support more than 1 channel.
	 * @return True if the device successfully began recording using the specified parameters, false if not.
	 */
	public function start(samplecount: Float, ?samplerate: Float, ?bitdepth: Float, ?channels: Float): Bool;

	/**
	 * Stops recording audio from this device. Any sound data currently in the device's buffer will be returned.
	 * @return The sound data currently in the device's buffer, or nil if the device wasn't recording.
	 */
	public function stop(): SoundData;
}