// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.window;
import haxe.extern.Rest;
import love.image.ImageData;
import lua.Table;
import lua.UserData;

/**
 * Provides an interface for modifying and retrieving information about the program's window.
 */
@:native('love.window')
extern class Window {

	/**
	 * Closes the window. It can be reopened with love.window.setMode.
	 */
	public static function close(): Void;

	/**
	 * Converts a number from pixels to density-independent units.
	 * The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.
	 * This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
	 * Most LÃ–VE functions return values and expect arguments in terms of pixels rather than density-independent units.
	 * @param pixelvalue A number in pixels to convert to density-independent units.
	 * @return The converted number, in density-independent units.
	 */
	@:overload(function (px: Float, py: Float): WindowFromPixelsResult {})
	public static function fromPixels(pixelvalue: Float): Float;

	/**
	 * Gets the DPI scale factor associated with the window.
	 * The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.
	 * The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.
	 * The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
	 * @return The pixel scale factor associated with the window.
	 */
	public static function getDPIScale(): Float;

	/**
	 * Gets the width and height of the desktop.
	 * @param displayindex The index of the display, if multiple monitors are available.
	 */
	public static function getDesktopDimensions(?displayindex: Float): WindowGetDesktopDimensionsResult;

	/**
	 * Gets the number of connected monitors.
	 * @return The number of currently connected displays.
	 */
	public static function getDisplayCount(): Float;

	/**
	 * Gets the name of a display.
	 * @param displayindex The index of the display to get the name of.
	 * @return The name of the specified display.
	 */
	public static function getDisplayName(?displayindex: Float): String;

	/**
	 * Gets current device display orientation.
	 * @param displayindex Display index to get its display orientation, or nil for default display index.
	 * @return Current device display orientation.
	 */
	public static function getDisplayOrientation(?displayindex: Float): DisplayOrientation;

	/**
	 * Gets whether the window is fullscreen.
	 */
	public static function getFullscreen(): WindowGetFullscreenResult;

	/**
	 * Gets a list of supported fullscreen modes.
	 * @param displayindex The index of the display, if multiple monitors are available.
	 * @return A table of width/height pairs. (Note that this may not be in order.)
	 */
	public static function getFullscreenModes(?displayindex: Float): Table<Dynamic, Dynamic>;

	/**
	 * Gets the window icon.
	 * @return The window icon imagedata, or nil if no icon has been set with love.window.setIcon.
	 */
	public static function getIcon(): ImageData;

	/**
	 * Gets the display mode and properties of the window.
	 */
	public static function getMode(): WindowGetModeResult;

	/**
	 * Gets the position of the window on the screen.
	 * The window position is in the coordinate space of the display it is currently in.
	 */
	public static function getPosition(): WindowGetPositionResult;

	/**
	 * Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.
	 */
	public static function getSafeArea(): WindowGetSafeAreaResult;

	/**
	 * Gets the window title.
	 * @return The current window title.
	 */
	public static function getTitle(): String;

	/**
	 * Gets current vertical synchronization (vsync).
	 * @return Current vsync status. 1 if enabled, 0 if disabled, and -1 for adaptive vsync.
	 */
	public static function getVSync(): Float;

	/**
	 * Checks if the game window has keyboard focus.
	 * @return True if the window has the focus or false if not.
	 */
	public static function hasFocus(): Bool;

	/**
	 * Checks if the game window has mouse focus.
	 * @return True if the window has mouse focus or false if not.
	 */
	public static function hasMouseFocus(): Bool;

	/**
	 * Gets whether the display is allowed to sleep while the program is running.
	 * Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
	 * @return True if system display sleep is enabled / allowed, false otherwise.
	 */
	public static function isDisplaySleepEnabled(): Bool;

	/**
	 * Gets whether the Window is currently maximized.
	 * The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.
	 * @return True if the window is currently maximized in windowed mode, false otherwise.
	 */
	public static function isMaximized(): Bool;

	/**
	 * Gets whether the Window is currently minimized.
	 * @return True if the window is currently minimized, false otherwise.
	 */
	public static function isMinimized(): Bool;

	/**
	 * Checks if the window is open.
	 * @return True if the window is open, false otherwise.
	 */
	public static function isOpen(): Bool;

	/**
	 * Checks if the game window is visible.
	 * The window is considered visible if it's not minimized and the program isn't hidden.
	 * @return True if the window is visible or false if not.
	 */
	public static function isVisible(): Bool;

	/**
	 * Makes the window as large as possible.
	 * This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button.
	 */
	public static function maximize(): Void;

	/**
	 * Minimizes the window to the system's task bar / dock.
	 */
	public static function minimize(): Void;

	/**
	 * Causes the window to request the attention of the user if it is not in the foreground.
	 * In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.
	 * @param continuous Whether to continuously request attention until the window becomes active, or to do it only once.
	 */
	public static function requestAttention(?continuous: Bool): Void;

	/**
	 * Restores the size and position of the window if it was minimized or maximized.
	 */
	public static function restore(): Void;

	/**
	 * Sets whether the display is allowed to sleep while the program is running.
	 * Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
	 * @param enable True to enable system display sleep, false to disable it.
	 */
	public static function setDisplaySleepEnabled(enable: Bool): Void;

	/**
	 * Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
	 * @param fullscreen Whether to enter or exit fullscreen mode.
	 * @return True if an attempt to enter fullscreen was successful, false otherwise.
	 */
	@:overload(function (fullscreen: Bool, fstype: FullscreenType): Bool {})
	public static function setFullscreen(fullscreen: Bool): Bool;

	/**
	 * Sets the window icon until the game is quit. Not all operating systems support very large icon images.
	 * @param imagedata The window icon image.
	 * @return Whether the icon has been set successfully.
	 */
	public static function setIcon(imagedata: ImageData): Bool;

	/**
	 * Sets the display mode and properties of the window.
	 * If width or height is 0, setMode will use the width and height of the desktop. 
	 * Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to.
	 * @param width Display width.
	 * @param height Display height.
	 * @param flags The flags table with the options:
	 * @return True if successful, false otherwise.
	 */
	public static function setMode(width: Float, height: Float, flags: Table<Dynamic, Dynamic>): Bool;

	/**
	 * Sets the position of the window on the screen.
	 * The window position is in the coordinate space of the specified display.
	 * @param x The x-coordinate of the window's position.
	 * @param y The y-coordinate of the window's position.
	 * @param displayindex The index of the display that the new window position is relative to.
	 */
	public static function setPosition(x: Float, y: Float, ?displayindex: Float): Void;

	/**
	 * Sets the window title.
	 * @param title The new window title.
	 */
	public static function setTitle(title: String): Void;

	/**
	 * Sets vertical synchronization mode.
	 * @param vsync VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.
	 */
	public static function setVSync(vsync: Float): Void;

	/**
	 * Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
	 * @param title The title of the message box.
	 * @param message The text inside the message box.
	 * @param type The type of the message box.
	 * @param attachtowindow Whether the message box should be attached to the love window or free-floating.
	 * @return Whether the message box was successfully displayed.
	 */
	@:overload(function (title: String, message: String, buttonlist: Table<Dynamic, Dynamic>, ?type: MessageBoxType, ?attachtowindow: Bool): Float {})
	public static function showMessageBox(title: String, message: String, ?type: MessageBoxType, ?attachtowindow: Bool): Bool;

	/**
	 * Converts a number from density-independent units to pixels.
	 * The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.
	 * This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
	 * Most LÃ–VE functions return values and expect arguments in terms of pixels rather than density-independent units.
	 * @param value A number in density-independent units to convert to pixels.
	 * @return The converted number, in pixels.
	 */
	@:overload(function (x: Float, y: Float): WindowToPixelsResult {})
	public static function toPixels(value: Float): Float;

	/**
	 * Sets the display mode and properties of the window, without modifying unspecified properties.
	 * If width or height is 0, updateMode will use the width and height of the desktop. 
	 * Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.
	 * @param width Window width.
	 * @param height Window height.
	 * @param settings The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode.
	 * @return True if successful, false otherwise.
	 */
	public static function updateMode(width: Float, height: Float, settings: Table<Dynamic, Dynamic>): Bool;
}

@:multiReturn
extern class WindowToPixelsResult {
	var px: Float;
	var py: Float;
}

@:multiReturn
extern class WindowGetSafeAreaResult {
	var x: Float;
	var y: Float;
	var w: Float;
	var h: Float;
}

@:multiReturn
extern class WindowGetPositionResult {
	var x: Float;
	var y: Float;
	var displayindex: Float;
}

@:multiReturn
extern class WindowGetModeResult {
	var width: Float;
	var height: Float;
	var flags: Table<Dynamic, Dynamic>;
}

@:multiReturn
extern class WindowGetFullscreenResult {
	var fullscreen: Bool;
	var fstype: FullscreenType;
}

@:multiReturn
extern class WindowGetDesktopDimensionsResult {
	var width: Float;
	var height: Float;
}

@:multiReturn
extern class WindowFromPixelsResult {
	var x: Float;
	var y: Float;
}