// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.filesystem;
import haxe.extern.Rest;
import love.Data;
import love.data.ContainerType;
import lua.Table;
import lua.UserData;

/**
 * Represents a file on the filesystem. A function that takes a file path can also take a File.
 */
extern class File extends Object {

	/**
	 * Closes a File.
	 * @return Whether closing was successful.
	 */
	public function close(): Bool;

	/**
	 * Flushes any buffered written data in the file to the disk.
	 */
	public function flush(): FileFlushResult;

	/**
	 * Gets the buffer mode of a file.
	 */
	public function getBuffer(): FileGetBufferResult;

	/**
	 * Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path.
	 * @return The filename of the File.
	 */
	public function getFilename(): String;

	/**
	 * Gets the FileMode the file has been opened with.
	 * @return The mode this file has been opened with.
	 */
	public function getMode(): FileMode;

	/**
	 * Returns the file size.
	 * @return The file size in bytes.
	 */
	public function getSize(): Float;

	/**
	 * Gets whether end-of-file has been reached.
	 * @return Whether EOF has been reached.
	 */
	public function isEOF(): Bool;

	/**
	 * Gets whether the file is open.
	 * @return True if the file is currently open, false otherwise.
	 */
	public function isOpen(): Bool;

	/**
	 * Iterate over all the lines in a file.
	 * @return The iterator (can be used in for loops).
	 */
	public function lines(): Void -> String;

	/**
	 * Open the file for write, read or append.
	 * @param mode The mode to open the file in.
	 */
	public function open(mode: FileMode): FileOpenResult;

	/**
	 * Read a number of bytes from a file.
	 * @param bytes The number of bytes to read.
	 */
	@:overload(function (container: ContainerType, ?bytes: Float): FileReadResult {})
	public function read(?bytes: Float): FileReadResult;

	/**
	 * Seek to a position in a file
	 * @param pos The position to seek to
	 * @return Whether the operation was successful
	 */
	public function seek(pos: Float): Bool;

	/**
	 * Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode.
	 * File:flush will force any buffered data to be written to the disk.
	 * @param mode The buffer mode to use.
	 * @param size The maximum size in bytes of the file's buffer.
	 */
	public function setBuffer(mode: BufferMode, ?size: Float): FileSetBufferResult;

	/**
	 * Returns the position in the file.
	 * @return The current position.
	 */
	public function tell(): Float;

	/**
	 * Write data to a file.
	 * @param data The string data to write.
	 * @param size How many bytes to write.
	 */
	@:overload(function (data: Data, ?size: Float): FileWriteResult {})
	public function write(data: String, ?size: Float): FileWriteResult;
}

@:multiReturn
extern class FileWriteResult {
	var success: Bool;
	var errorstr: String;
}

@:multiReturn
extern class FileSetBufferResult {
	var success: Bool;
	var errorstr: String;
}

@:multiReturn
extern class FileReadResult {
	var contents: Dynamic;
	var size: Float;
}

@:multiReturn
extern class FileOpenResult {
	var ok: Bool;
	var err: String;
}

@:multiReturn
extern class FileGetBufferResult {
	var mode: BufferMode;
	var size: Float;
}

@:multiReturn
extern class FileFlushResult {
	var success: Bool;
	var err: String;
}