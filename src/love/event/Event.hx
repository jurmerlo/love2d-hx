// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.event;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Manages events, like keypresses.
 */
@:native('love.event')
extern class Event {

	/**
	 * Clears the event queue.
	 */
	public static function clear(): Void;

	/**
	 * Returns an iterator for messages in the event queue.
	 * @return Iterator function usable in a for loop.
	 */
	public static function poll(): Void -> String;

	/**
	 * Pump events into the event queue.
	 * This is a low-level function, and is usually not called by the user, but by love.run.
	 * Note that this does need to be called for any OS to think you're still running,
	 * and if you want to handle OS-generated events at all (think callbacks).
	 */
	public static function pump(): Void;

	/**
	 * Adds an event to the event queue.
	 * From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.
	 * @param n The name of the event.
	 * @param a First event argument.
	 * @param b Second event argument.
	 * @param c Third event argument.
	 * @param d Fourth event argument.
	 * @param e Fifth event argument.
	 * @param f Sixth event argument.
	 * @param ... Further event arguments may follow.
	 */
	public static function push(n: Event, ?a: Dynamic, ?b: Dynamic, ?c: Dynamic, ?d: Dynamic, ?e: Dynamic, ?f: Dynamic, args: Rest<Dynamic>): Void;

	/**
	 * Adds the quit event to the queue.
	 * The quit event is a signal for the event handler to close LÃ–VE. It's possible to abort the exit process with the love.quit callback.
	 * @param exitstatus The program exit status to use when closing the application.
	 */
	@:overload(function (restart: String): Void {})
	public static function quit(?exitstatus: Float): Void;

	/**
	 * Like love.event.poll(), but blocks until there is an event in the queue.
	 */
	public static function wait(): EventWaitResult;
}

@:multiReturn
extern class EventWaitResult {
	var n: Event;
	var a: Dynamic;
	var b: Dynamic;
	var c: Dynamic;
	var d: Dynamic;
	var e: Dynamic;
	var f: Dynamic;
}