// Generated by https://github.com/square-two/love2d-hx.
// Love2D Version 11.5.

package love.mouse;
import haxe.extern.Rest;
import love.filesystem.FileData;
import love.image.ImageData;
import lua.Table;
import lua.UserData;

/**
 * Provides an interface to the user's mouse.
 */
@:native('love.mouse')
extern class MouseModule {

	/**
	 * Gets the current Cursor.
	 * @return The current cursor, or nil if no cursor is set.
	 */
	public static function getCursor(): Cursor;

	/**
	 * Returns the current position of the mouse.
	 */
	public static function getPosition(): MouseModuleGetPositionResult;

	/**
	 * Gets whether relative mode is enabled for the mouse.
	 * If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.
	 * The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.
	 * @return True if relative mode is enabled, false if it's disabled.
	 */
	public static function getRelativeMode(): Bool;

	/**
	 * Gets a Cursor object representing a system-native hardware cursor.
	 * Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
	 * @param ctype The type of system cursor to get. 
	 * @return The Cursor object representing the system cursor type.
	 */
	public static function getSystemCursor(ctype: CursorType): Cursor;

	/**
	 * Returns the current x-position of the mouse.
	 * @return The position of the mouse along the x-axis.
	 */
	public static function getX(): Float;

	/**
	 * Returns the current y-position of the mouse.
	 * @return The position of the mouse along the y-axis.
	 */
	public static function getY(): Float;

	/**
	 * Gets whether cursor functionality is supported.
	 * If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.
	 * @return Whether the system has cursor functionality.
	 */
	public static function isCursorSupported(): Bool;

	/**
	 * Checks whether a certain mouse button is down.
	 * This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. 
	 * @param button The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant.
	 * @param ... Additional button numbers to check.
	 * @return True if any specified button is down.
	 */
	public static function isDown(button: Float, args: Rest<Float>): Bool;

	/**
	 * Checks if the mouse is grabbed.
	 * @return True if the cursor is grabbed, false if it is not.
	 */
	public static function isGrabbed(): Bool;

	/**
	 * Checks if the cursor is visible.
	 * @return True if the cursor to visible, false if the cursor is hidden.
	 */
	public static function isVisible(): Bool;

	/**
	 * Creates a new hardware Cursor object from an image file or ImageData.
	 * Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
	 * The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
	 * @param imageData The ImageData to use for the new Cursor.
	 * @param hotx The x-coordinate in the ImageData of the cursor's hot spot.
	 * @param hoty The y-coordinate in the ImageData of the cursor's hot spot.
	 * @return The new Cursor object.
	 */
	@:overload(function (filename: String, ?hotx: Float, ?hoty: Float): Cursor {})
	@:overload(function (fileData: FileData, ?hotx: Float, ?hoty: Float): Cursor {})
	public static function newCursor(imageData: ImageData, ?hotx: Float, ?hoty: Float): Cursor;

	/**
	 * Sets the current mouse cursor.
	 * @param cursor The Cursor object to use as the current mouse cursor.
	 */
	@:overload(function (): Void {})
	public static function setCursor(cursor: Cursor): Void;

	/**
	 * Grabs the mouse and confines it to the window.
	 * @param grab True to confine the mouse, false to let it leave the window.
	 */
	public static function setGrabbed(grab: Bool): Void;

	/**
	 * Sets the current position of the mouse. Non-integer values are floored.
	 * @param x The new position of the mouse along the x-axis.
	 * @param y The new position of the mouse along the y-axis.
	 */
	public static function setPosition(x: Float, y: Float): Void;

	/**
	 * Sets whether relative mode is enabled for the mouse.
	 * When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.
	 * The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated.
	 * @param enable True to enable relative mode, false to disable it.
	 */
	public static function setRelativeMode(enable: Bool): Void;

	/**
	 * Sets the current visibility of the cursor.
	 * @param visible True to set the cursor to visible, false to hide the cursor.
	 */
	public static function setVisible(visible: Bool): Void;

	/**
	 * Sets the current X position of the mouse.
	 * Non-integer values are floored.
	 * @param x The new position of the mouse along the x-axis.
	 */
	public static function setX(x: Float): Void;

	/**
	 * Sets the current Y position of the mouse.
	 * Non-integer values are floored.
	 * @param y The new position of the mouse along the y-axis.
	 */
	public static function setY(y: Float): Void;
}

@:multiReturn
extern class MouseModuleGetPositionResult {
	var x: Float;
	var y: Float;
}