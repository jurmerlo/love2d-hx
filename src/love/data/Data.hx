// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.data;
import haxe.extern.Rest;
import love.Data;
import lua.Table;
import lua.UserData;

/**
 * Provides functionality for creating and transforming data.
 */
@:native('love.data')
extern class Data {

	/**
	 * Compresses a string or data using a specific compression algorithm.
	 * @param container What type to return the compressed data as.
	 * @param format The format to use when compressing the string.
	 * @param rawstring The raw (un-compressed) string to compress.
	 * @param level The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.
	 * @return CompressedData/string which contains the compressed version of rawstring.
	 */
	@:overload(function (container: ContainerType, format: CompressedDataFormat, data: Data, ?level: Float): Dynamic {})
	public static function compress(container: ContainerType, format: CompressedDataFormat, rawstring: String, ?level: Float): Dynamic;

	/**
	 * Decode Data or a string from any of the EncodeFormats to Data or string.
	 * @param container What type to return the decoded data as.
	 * @param format The format of the input data.
	 * @param sourceString The raw (encoded) data to decode.
	 * @return ByteData/string which contains the decoded version of source.
	 */
	@:overload(function (container: ContainerType, format: EncodeFormat, sourceData: Data): Dynamic {})
	public static function decode(container: ContainerType, format: EncodeFormat, sourceString: String): Dynamic;

	/**
	 * Decompresses a CompressedData or previously compressed string or Data object.
	 * @param container What type to return the decompressed data as.
	 * @param compressedData The compressed data to decompress.
	 * @return Data/string containing the raw decompressed data.
	 */
	@:overload(function (container: ContainerType, format: CompressedDataFormat, compressedString: String): Dynamic {})
	@:overload(function (container: ContainerType, format: CompressedDataFormat, data: Data): Dynamic {})
	public static function decompress(container: ContainerType, compressedData: CompressedData): Dynamic;

	/**
	 * Encode Data or a string to a Data or string in one of the EncodeFormats.
	 * @param container What type to return the encoded data as.
	 * @param format The format of the output data.
	 * @param sourceString The raw data to encode.
	 * @param linelength The maximum line length of the output. Only supported for base64, ignored if 0.
	 * @return ByteData/string which contains the encoded version of source.
	 */
	@:overload(function (container: ContainerType, format: EncodeFormat, sourceData: Data, ?linelength: Float): Dynamic {})
	public static function encode(container: ContainerType, format: EncodeFormat, sourceString: String, ?linelength: Float): Dynamic;

	/**
	 * Gets the size in bytes that a given format used with love.data.pack will use.
	 * This function behaves the same as Lua 5.3's string.packsize.
	 * @param format A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
	 * @return The size in bytes that the packed data will use.
	 */
	public static function getPackedSize(format: String): Float;

	/**
	 * Compute the message digest of a string using a specified hash algorithm.
	 * @param hashFunction Hash algorithm to use.
	 * @param string String to hash.
	 * @return Raw message digest string.
	 */
	@:overload(function (hashFunction: HashFunction, data: Data): String {})
	public static function hash(hashFunction: HashFunction, string: String): String;

	/**
	 * Creates a new Data object containing arbitrary bytes.
	 * Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
	 * @param datastring The byte string to copy.
	 * @return The new Data object.
	 */
	@:overload(function (Data: Data, ?offset: Float, ?size: Float): ByteData {})
	@:overload(function (size: Float): ByteData {})
	public static function newByteData(datastring: String): ByteData;

	/**
	 * Creates a new Data referencing a subsection of an existing Data object.
	 * @param data The Data object to reference.
	 * @param offset The offset of the subsection to reference, in bytes.
	 * @param size The size in bytes of the subsection to reference.
	 * @return The new Data view.
	 */
	public static function newDataView(data: Data, offset: Float, size: Float): Data;

	/**
	 * Packs (serializes) simple Lua values.
	 * This function behaves the same as Lua 5.3's string.pack.
	 * @param container What type to return the encoded data as.
	 * @param format A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
	 * @param v1 The first value (number, boolean, or string) to serialize.
	 * @param ... Additional values to serialize.
	 * @return Data/string which contains the serialized data.
	 */
	public static function pack(container: ContainerType, format: String, v1: Dynamic, args: Rest<Dynamic>): Dynamic;

	/**
	 * Unpacks (deserializes) a byte-string or Data into simple Lua values.
	 * This function behaves the same as Lua 5.3's string.unpack.
	 * @param format A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.
	 * @param datastring A string containing the packed (serialized) data.
	 * @param pos Where to start reading in the string. Negative values can be used to read relative from the end of the string.
	 */
	@:overload(function (format: String, data: Data, ?pos: Float): DataUnpackResult {})
	public static function unpack(format: String, datastring: String, ?pos: Float): DataUnpackResult;
}

@:multiReturn
extern class DataUnpackResult {
	var v1: Dynamic;
	var index: Float;
}