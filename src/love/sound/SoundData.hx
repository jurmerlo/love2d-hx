// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love.sound;
import haxe.extern.Rest;
import lua.Table;
import lua.UserData;

/**
 * Contains raw audio samples.
 * You can not play SoundData back directly. You must wrap a Source object around it.
 */
extern class SoundData extends Data {

	/**
	 * Returns the number of bits per sample.
	 * @return Either 8, or 16.
	 */
	public function getBitDepth(): Float;

	/**
	 * Returns the number of channels in the SoundData.
	 * @return 1 for mono, 2 for stereo.
	 */
	public function getChannelCount(): Float;

	/**
	 * Gets the duration of the sound data.
	 * @return The duration of the sound data in seconds.
	 */
	public function getDuration(): Float;

	/**
	 * Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
	 * @param i An integer value specifying the position of the sample (starting at 0).
	 * @return The normalized samplepoint (range -1.0 to 1.0).
	 */
	@:overload(function (i: Float, channel: Float): Float {})
	public function getSample(i: Float): Float;

	/**
	 * Returns the number of samples per channel of the SoundData.
	 * @return Total number of samples.
	 */
	public function getSampleCount(): Float;

	/**
	 * Returns the sample rate of the SoundData.
	 * @return Number of samples per second.
	 */
	public function getSampleRate(): Float;

	/**
	 * Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
	 * @param i An integer value specifying the position of the sample (starting at 0).
	 * @param sample The normalized samplepoint (range -1.0 to 1.0).
	 */
	@:overload(function (i: Float, channel: Float, sample: Float): Void {})
	public function setSample(i: Float, sample: Float): Void;
}