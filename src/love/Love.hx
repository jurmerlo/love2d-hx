// Generated by https://github.com/jurmerlo/love2d-hx.
// Love2D Version 11.5.

package love;
import haxe.extern.Rest;
import love.filesystem.DroppedFile;
import love.joystick.GamepadAxis;
import love.joystick.GamepadButton;
import love.joystick.Joystick;
import love.joystick.JoystickHat;
import love.keyboard.KeyConstant;
import love.keyboard.Scancode;
import love.thread.Thread;
import love.window.DisplayOrientation;
import lua.Table;
import lua.UserData;

@:native('love')
extern class Love {

	/**
	 * Gets the current running version of LÖVE.
	 */
	public static function getVersion(): LoveGetVersionResult;

	/**
	 * Gets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.
	 * When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
	 * @return Whether deprecation output is enabled.
	 */
	public static function hasDeprecationOutput(): Bool;

	/**
	 * Gets whether the given version is compatible with the current running version of LÖVE.
	 * @param version The version to check (for example '11.3' or '0.10.2').
	 * @return Whether the given version is compatible with the current running version of LÖVE.
	 */
	@:overload(function (major: Float, minor: Float, revision: Float): Bool {})
	public static function isVersionCompatible(version: String): Bool;

	/**
	 * Sets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.
	 * When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
	 * @param enable Whether to enable or disable deprecation output.
	 */
	public static function setDeprecationOutput(enable: Bool): Void;

	/**
	 * If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded. You can use this file to overwrite the love.conf function, which is later called by the LÖVE 'boot' script. Using the love.conf function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.
	 * @param t The love.conf function takes one argument: a table filled with all the default values which you can overwrite to your liking. If you want to change the default window size, for instance, do:

function love.conf(t)
    t.window.width = 1024
    t.window.height = 768
end

If you don't need the physics module or joystick module, do the following.

function love.conf(t)
    t.modules.joystick = false
    t.modules.physics = false
end

Setting unused modules to false is encouraged when you release your game. It reduces startup time slightly (especially if the joystick module is disabled) and reduces memory usage (slightly).

Note that you can't disable love.filesystem; it's mandatory. The same goes for the love module itself. love.graphics needs love.window to be enabled.
	 */
	public static var conf: (Table<Dynamic, Dynamic>) -> Void;

	/**
	 * Callback function triggered when a directory is dragged and dropped onto the window.
	 * @param path The full platform-dependent path to the directory. It can be used as an argument to love.filesystem.mount, in order to gain read access to the directory with love.filesystem.
	 */
	public static var directorydropped: (String) -> Void;

	/**
	 * Called when the device display orientation changed, for example, user rotated their phone 180 degrees.
	 * @param index The index of the display that changed orientation.
	 * @param orientation The new orientation.
	 */
	public static var displayrotated: (Float, DisplayOrientation) -> Void;

	/**
	 * Callback function used to draw on the screen every frame.
	 */
	public static var draw: () -> Void;

	/**
	 * The error handler, used to display error messages.
	 * @param msg The error message.
	 * @return Function which handles one frame, including events and rendering, when called. If this is nil then LÖVE exits immediately.
	 */
	public static var errorhandler: (String) -> (Void -> Dynamic);

	/**
	 * Callback function triggered when a file is dragged and dropped onto the window.
	 * @param file The unopened File object representing the file that was dropped.
	 */
	public static var filedropped: (DroppedFile) -> Void;

	/**
	 * Callback function triggered when window receives or loses focus.
	 * @param focus True if the window gains focus, false if it loses focus. 
	 */
	public static var focus: (Bool) -> Void;

	/**
	 * Called when a Joystick's virtual gamepad axis is moved.
	 * @param joystick The joystick object.
	 * @param axis The virtual gamepad axis.
	 * @param value The new axis value.
	 */
	public static var gamepadaxis: (Joystick, GamepadAxis, Float) -> Void;

	/**
	 * Called when a Joystick's virtual gamepad button is pressed.
	 * @param joystick The joystick object.
	 * @param button The virtual gamepad button.
	 */
	public static var gamepadpressed: (Joystick, GamepadButton) -> Void;

	/**
	 * Called when a Joystick's virtual gamepad button is released.
	 * @param joystick The joystick object.
	 * @param button The virtual gamepad button.
	 */
	public static var gamepadreleased: (Joystick, GamepadButton) -> Void;

	/**
	 * Called when a Joystick is connected.
	 * @param joystick The newly connected Joystick object.
	 */
	public static var joystickadded: (Joystick) -> Void;

	/**
	 * Called when a joystick axis moves.
	 * @param joystick The joystick object.
	 * @param axis The axis number.
	 * @param value The new axis value.
	 */
	public static var joystickaxis: (Joystick, Float, Float) -> Void;

	/**
	 * Called when a joystick hat direction changes.
	 * @param joystick The joystick object.
	 * @param hat The hat number.
	 * @param direction The new hat direction.
	 */
	public static var joystickhat: (Joystick, Float, JoystickHat) -> Void;

	/**
	 * Called when a joystick button is pressed.
	 * @param joystick The joystick object.
	 * @param button The button number.
	 */
	public static var joystickpressed: (Joystick, Float) -> Void;

	/**
	 * Called when a joystick button is released.
	 * @param joystick The joystick object.
	 * @param button The button number.
	 */
	public static var joystickreleased: (Joystick, Float) -> Void;

	/**
	 * Called when a Joystick is disconnected.
	 * @param joystick The now-disconnected Joystick object.
	 */
	public static var joystickremoved: (Joystick) -> Void;

	/**
	 * Callback function triggered when a key is pressed.
	 * @param key Character of the pressed key.
	 * @param scancode The scancode representing the pressed key.
	 * @param isrepeat Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.
	 */
	public static var keypressed: (KeyConstant, Scancode, Bool) -> Void;

	/**
	 * Callback function triggered when a keyboard key is released.
	 * @param key Character of the released key.
	 * @param scancode The scancode representing the released key.
	 */
	public static var keyreleased: (KeyConstant, Scancode) -> Void;

	/**
	 * This function is called exactly once at the beginning of the game.
	 * @param arg Command-line arguments given to the game.
	 * @param unfilteredArg Unfiltered command-line arguments given to the executable (see #Notes).
	 */
	public static var load: (Table<Dynamic, Dynamic>, Table<Dynamic, Dynamic>) -> Void;

	/**
	 * Callback function triggered when the system is running out of memory on mobile devices.
	 * Mobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to '''nil'''), when this event is triggered. Sounds and images in particular tend to use the most memory.
	 */
	public static var lowmemory: () -> Void;

	/**
	 * Callback function triggered when window receives or loses mouse focus.
	 * @param focus Whether the window has mouse focus or not.
	 */
	public static var mousefocus: (Bool) -> Void;

	/**
	 * Callback function triggered when the mouse is moved.
	 * @param x The mouse position on the x-axis.
	 * @param y The mouse position on the y-axis.
	 * @param dx The amount moved along the x-axis since the last time love.mousemoved was called.
	 * @param dy The amount moved along the y-axis since the last time love.mousemoved was called.
	 * @param istouch True if the mouse button press originated from a touchscreen touch-press.
	 */
	public static var mousemoved: (Float, Float, Float, Float, Bool) -> Void;

	/**
	 * Callback function triggered when a mouse button is pressed.
	 * @param x Mouse x position, in pixels.
	 * @param y Mouse y position, in pixels.
	 * @param button The button index that was pressed. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.
	 * @param istouch True if the mouse button press originated from a touchscreen touch-press.
	 * @param presses The number of presses in a short time frame and small area, used to simulate double, triple clicks
	 */
	public static var mousepressed: (Float, Float, Float, Bool, Float) -> Void;

	/**
	 * Callback function triggered when a mouse button is released.
	 * @param x Mouse x position, in pixels.
	 * @param y Mouse y position, in pixels.
	 * @param button The button index that was released. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.
	 * @param istouch True if the mouse button release originated from a touchscreen touch-release.
	 * @param presses The number of presses in a short time frame and small area, used to simulate double, triple clicks
	 */
	public static var mousereleased: (Float, Float, Float, Bool, Float) -> Void;

	/**
	 * Callback function triggered when the game is closed.
	 * @return Abort quitting. If true, do not close the game.
	 */
	public static var quit: () -> Bool;

	/**
	 * Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.
	 * @param w The new width.
	 * @param h The new height.
	 */
	public static var resize: (Float, Float) -> Void;

	/**
	 * The main function, containing the main loop. A sensible default is used when left out.
	 * @return Function which handlers one frame, including events and rendering when called.
	 */
	public static var run: () -> (Void -> Dynamic);

	/**
	 * Called when the candidate text for an IME (Input Method Editor) has changed.
	 * The candidate text is not the final text that the user will eventually choose. Use love.textinput for that.
	 * @param text The UTF-8 encoded unicode candidate text.
	 * @param start The start cursor of the selected candidate text.
	 * @param length The length of the selected candidate text. May be 0.
	 */
	public static var textedited: (String, Float, Float) -> Void;

	/**
	 * Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text '@' will be generated.
	 * @param text The UTF-8 encoded unicode text.
	 */
	public static var textinput: (String) -> Void;

	/**
	 * Callback function triggered when a Thread encounters an error.
	 * @param thread The thread which produced the error.
	 * @param errorstr The error message.
	 */
	public static var threaderror: (Thread, String) -> Void;

	/**
	 * Callback function triggered when a touch press moves inside the touch screen.
	 * @param id The identifier for the touch press.
	 * @param x The x-axis position of the touch inside the window, in pixels.
	 * @param y The y-axis position of the touch inside the window, in pixels.
	 * @param dx The x-axis movement of the touch inside the window, in pixels.
	 * @param dy The y-axis movement of the touch inside the window, in pixels.
	 * @param pressure The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
	 */
	public static var touchmoved: (UserData, Float, Float, Float, Float, Float) -> Void;

	/**
	 * Callback function triggered when the touch screen is touched.
	 * @param id The identifier for the touch press.
	 * @param x The x-axis position of the touch press inside the window, in pixels.
	 * @param y The y-axis position of the touch press inside the window, in pixels.
	 * @param dx The x-axis movement of the touch press inside the window, in pixels. This should always be zero.
	 * @param dy The y-axis movement of the touch press inside the window, in pixels. This should always be zero.
	 * @param pressure The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
	 */
	public static var touchpressed: (UserData, Float, Float, Float, Float, Float) -> Void;

	/**
	 * Callback function triggered when the touch screen stops being touched.
	 * @param id The identifier for the touch press.
	 * @param x The x-axis position of the touch inside the window, in pixels.
	 * @param y The y-axis position of the touch inside the window, in pixels.
	 * @param dx The x-axis movement of the touch inside the window, in pixels.
	 * @param dy The y-axis movement of the touch inside the window, in pixels.
	 * @param pressure The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
	 */
	public static var touchreleased: (UserData, Float, Float, Float, Float, Float) -> Void;

	/**
	 * Callback function used to update the state of the game every frame.
	 * @param dt Time since the last update in seconds.
	 */
	public static var update: (Float) -> Void;

	/**
	 * Callback function triggered when window is minimized/hidden or unminimized by the user.
	 * @param visible True if the window is visible, false if it isn't.
	 */
	public static var visible: (Bool) -> Void;

	/**
	 * Callback function triggered when the mouse wheel is moved.
	 * @param x Amount of horizontal mouse wheel movement. Positive values indicate movement to the right.
	 * @param y Amount of vertical mouse wheel movement. Positive values indicate upward movement.
	 */
	public static var wheelmoved: (Float, Float) -> Void;
}

@:multiReturn
extern class LoveGetVersionResult {
	var major: Float;
	var minor: Float;
	var revision: Float;
	var codename: String;
}